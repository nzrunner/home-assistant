- id: '1612565706408'
  alias: Motion - Office
  description: Turn on the office lights and monitors when motion is detected
  trigger:
  - type: motion
    platform: device
    device_id: e1e2966998a59721e9baf330ffbed4f1
    entity_id: binary_sensor.office_motion
    domain: binary_sensor
    id: started
  - type: no_motion
    platform: device
    device_id: e1e2966998a59721e9baf330ffbed4f1
    entity_id: binary_sensor.office_motion
    domain: binary_sensor
    for:
      hours: 0
      minutes: 5
      seconds: 0
    id: stopped
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: started
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.office_occupied
          state: 'off'
        then:
        - if:
          - condition: numeric_state
            entity_id: zone.home
            above: 0
            below: 2
          then:
          - service: script.broadcast_message
            data:
              entity_id: media_player.office_speaker
              message: "{% if states['binary_sensor.morning'].state == \"on\" %}Good
                morning\n  {% elif states['binary_sensor.afternoon'].state == \"on\"
                %}Good afternoon\n  {% else %}Good evening{% endif %} {% set people
                = state_attr('zone.home', 'persons') %} {% set peoplestr\n= state_attr(people[0],
                \"friendly_name\") %} {% set list1 = peoplestr.split(' ') %} {{ list1[0]
                }}! {% if states['input_boolean.mission_control'].state == \"off\"
                %} Welcome to Mission Control {% endif %}"
              volume: 0.4
          else:
          - service: script.broadcast_message
            data:
              entity_id: media_player.office_speaker
              message: "{% if states['binary_sensor.morning'].state == \"on\" %}Good
                morning\n  {% elif states['binary_sensor.afternoon'].state == \"on\"
                %}Good afternoon\n  {% else %}Good evening{% endif %} {% if states['input_boolean.mission_control'].state
                == \"off\" %}\nWelcome to Mission Control {% endif %}"
              volume: 0.4
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.office_occupied
      - service: switch.turn_on
        data: {}
        target:
          entity_id:
          - switch.monitors
          - switch.plug_2
          - switch.plug_3
      - if:
        - type: is_illuminance
          condition: device
          device_id: e1e2966998a59721e9baf330ffbed4f1
          entity_id: sensor.office_motion_light_level
          domain: sensor
          below: 8
        then:
        - service: scene.turn_on
          target:
            entity_id: scene.office_cool_bright
          metadata: {}
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: input_boolean.mission_control
    - conditions:
      - condition: trigger
        id: stopped
      sequence:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.office_occupied
      - service: switch.turn_off
        data: {}
        target:
          entity_id:
          - switch.monitors
          - switch.plug_2
          - switch.plug_3
      - type: turn_off
        device_id: 55263a0410c211eb93077d4d7438f169
        entity_id: light.office
        domain: light
  mode: single
- id: '1612567868933'
  alias: Motion - Office - Empty
  description: Turn off monitors and lights if no motion is detected for 5 minutes
  trigger:
  - type: no_motion
    platform: device
    device_id: e1e2966998a59721e9baf330ffbed4f1
    entity_id: binary_sensor.office_motion
    domain: binary_sensor
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: state
    entity_id: input_boolean.office_occupied
    state: 'on'
  action:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.office_occupied
  - service: switch.turn_off
    data: {}
    target:
      entity_id:
      - switch.monitors
      - switch.plug_2
      - switch.plug_3
  - type: turn_off
    device_id: 55263a0410c211eb93077d4d7438f169
    entity_id: light.office
    domain: light
  mode: single
- id: '123'
  alias: System - Config Check
  description: Home Assistant Config Check
  trigger: []
  condition: []
  action:
  - service: script.check_config
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - alias: Restart on condition
    choose:
    - alias: validate and restart
      conditions:
      - condition: state
        entity_id: sensor.config_result
        state: invalid
      sequence:
      - service: notify.mark_ios_devices
        data:
          title: Home Assistant
          message: Config Check invalid
          data:
            push:
              interruption-level: active
            group: Alarm
    default: []
  mode: single
- id: '9876543210'
  alias: Backup - Midday
  description: Incremental backup run every 12 hours and kept for 2 days
  trigger:
  - platform: time_pattern
    hours: /12
  condition:
  - condition: time
    after: 00:01:00
    before: '23:59:00'
  action:
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.backup_active
      - input_boolean.backup_sync_active
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_active
  - service: auto_backup.backup_partial
    data:
      name: Midday - {{ now().strftime('%A %-d %B %Y %-I:%M %p') }}
      keep_days: 3
      folders:
      - homeassistant
      - media
      - share
      - ssl
    enabled: false
  - service: hassio.addon_stdin
    data:
      addon: 15d21743_samba_backup
      input: trigger
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - wait_for_trigger:
    - platform: state
      entity_id:
      - sensor.samba_backup
      from: RUNNING
  - wait_template: '{{ states(''sensor.samba_backup'') != ''RUNNING'' }}'
    continue_on_timeout: false
    enabled: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_active
    enabled: false
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_sync_active
  - service: script.dropbox_sync
    data: {}
  - wait_template: '{{ is_state(''sensor.dropback_sync'',''None'') }}'
    continue_on_timeout: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_sync_active
    enabled: false
- id: '9876543211'
  alias: Backup - Midnight
  description: Perform a full HASS backup once a day at 02:30, every day except Monday.
    They are retained for 7 days
  trigger:
  - platform: time
    at: 00:00:00
  condition:
  - condition: time
    weekday:
    - tue
    - wed
    - thu
    - fri
    - sat
    - mon
    enabled: false
  action:
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.backup_active_midnight
      - input_boolean.backup_sync_active_midnight
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_active_midnight
    enabled: true
  - service: auto_backup.backup_partial
    data:
      name: Midnight - {{ now().strftime('%A %-d %B %Y %-I:%M %p') }}
      keep_days: 6
      folders:
      - homeassistant
      - media
      - share
      - ssl
    enabled: false
  - service: hassio.addon_stdin
    data:
      addon: 15d21743_samba_backup
      input: trigger
  - delay:
      hours: 0
      minutes: 0
      seconds: 15
      milliseconds: 0
  - wait_template: '{{ states(''sensor.samba_backup'') != ''RUNNING'' }}'
    continue_on_timeout: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_active_midnight
    enabled: false
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_sync_active_midnight
    enabled: true
  - service: script.dropbox_sync
    data: {}
  - wait_template: '{{ is_state(''sensor.dropback_sync'',''None'') }}'
    continue_on_timeout: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_sync_active_midnight
    enabled: false
- id: '9876543212'
  alias: Backup - Weekly
  description: Perform a full HASS backup every week, on a Monday at 02:30. It is
    retained for 28 days
  trigger:
  - platform: time
    at: 00:00:00
  condition:
  - condition: time
    weekday:
    - sun
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_active_midnight
  - service: auto_backup.backup_full
    data:
      name: Weekly - {{ now().strftime('%A %-d %B %Y %-I:%M %p') }}
      keep_days: 29
    enabled: false
  - service: hassio.addon_stdin
    data:
      addon: 15d21743_samba_backup
      input: trigger
  - wait_template: '{{ states(''sensor.samba_backup'') != ''RUNNING'' }}'
    continue_on_timeout: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_active_midnight
    enabled: false
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_sync_active_midnight
  - service: script.dropbox_sync
    data: {}
  - wait_template: '{{ is_state(''sensor.dropback_sync'',''None'') }}'
    continue_on_timeout: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_sync_active_midnight
    enabled: false
- id: '987654324'
  alias: HASS - Update - Notification
  description: A Home Assistant update is available!
  trigger:
  - platform: state
    entity_id:
    - update.home_assistant_core_update
    - update.home_assistant_supervisor_update
    from: 'off'
    to: 'on'
  action:
  - service: notify.mobile_app_marks_iphone
    data:
      title: Home Assistant - Update Available
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} version {{
        state_attr(trigger.entity_id, ''latest_version'') }} has been released!'
      data:
        push:
          interruption-level: active
        group: Updates
  initial_state: false
- id: '1640993226588'
  alias: NAS - MAT-NAS-002 - Persistent Notification
  description: There are app updates available for MAT-NAS-002
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.mat_nas_002_security_status
    to: unsafe
  condition:
  - type: is_unsafe
    condition: device
    device_id: bb7810ae10c211eb8f99effc3c654169
    entity_id: binary_sensor.mat_nas_002_security_status
    domain: binary_sensor
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        title: MAT-NAS-002 Updates
        message: Apps are {{state_attr('binary_sensor.mat_nas_002_security_status',
          'update') }}
        data:
          push:
            interruption-level: active
          group: Updates
  mode: single
  initial_state: true
- id: '1640995213747'
  alias: NAS - Updates - Notification
  description: There are app updates available on a NAS
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.piha_security_status
    - binary_sensor.mat_nas_002_security_status
    attribute: update
    to: outOfDate
    from: safe
  condition: []
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        message: '{{ state_attr(trigger.entity_id, ''name'') }} has app updates available'
        data:
          push:
            interruption-level: active
          group: Updates
  - service: notify.persistent_notification
    data:
      message: '{{ state_attr(trigger.entity_id, ''name'') }} has app updates available'
      title: NAS Updates Available
  mode: single
  initial_state: true
- id: '1641024889431'
  alias: Presence - Bedtime
  description: Activate lights and broadcast a message nearing bedtime
  trigger:
  - platform: time
    at: '22:15:00'
  condition:
  - condition: state
    entity_id: group.occupants
    state: home
  - condition: state
    entity_id: input_boolean.gone_to_bed
    state: 'off'
  action:
  - scene: scene.stairs_relax
    enabled: false
  - scene: scene.master_bedroom_dimmed
    enabled: false
  - service: scene.turn_on
    target:
      entity_id: scene.living_room_dimmed
    metadata: {}
    enabled: false
  - service: script.broadcast_message
    data:
      entity_id: media_player.living_room_speaker
      message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass", "ninny",
        "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy", "ding-a-ling",
        "dipstick", "ding-dong", "half-wit", "numbskull", "fathead", "butt-head",
        "dumbbell", "chump", "dunce", "dodo"]|random }}, it's bedtime! Get your butt
        up to bed.
      volume: '{{ states(''input_number.volume_default'') }}'
  mode: single
- id: '910112211'
  alias: Alert - Office - Motion
  description: Notification when motion is detected in the Office
  trigger:
  - type: motion
    platform: device
    device_id: e1e2966998a59721e9baf330ffbed4f1
    entity_id: binary_sensor.office_motion
    domain: binary_sensor
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: Motion detected in the {{ area_name(trigger.entity_id) }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1641636320894'
  alias: Alert - Stairs - Motion
  description: ''
  trigger:
  - type: motion
    platform: device
    device_id: 4a5afeb4c9503bf0c19c50e47c75ed33
    entity_id: binary_sensor.upstairs_2_iaszone
    domain: binary_sensor
  - type: motion
    platform: device
    device_id: 1d7d59d94c75d97244521d56052b20ad
    entity_id: binary_sensor.downstairs_motion_iaszone
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: Motion detected in the {{ area_name(trigger.entity_id) }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1641638539739'
  alias: Motion - Stairs - Empty
  description: Turn off the stair light when the Stair motion detectors goes to an
    off state (3 minutes after last motion)
  trigger:
  - type: no_motion
    platform: device
    device_id: 4a5afeb4c9503bf0c19c50e47c75ed33
    entity_id: binary_sensor.upstairs_motion_iaszone
    domain: binary_sensor
    for:
      hours: 0
      minutes: 2
      seconds: 0
  - type: no_motion
    platform: device
    device_id: 1d7d59d94c75d97244521d56052b20ad
    entity_id: binary_sensor.downstairs_motion_iaszone
    domain: binary_sensor
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition: []
  action:
  - type: turn_off
    device_id: 55292fde10c211eba548dd2311283eaa
    entity_id: light.stairs
    domain: light
  mode: single
- id: '1641696482993'
  alias: Alarm - Leave Home
  description: When all occupants leave home, set Synology Surveillance Station into
    Away mode, turn off TV and lights
  trigger:
  - platform: state
    entity_id:
    - group.occupants
    from: home
    for:
      hours: 0
      minutes: 0
      seconds: 0
    to: not_home
  condition: []
  action:
  - service: automation.trigger
    data:
      skip_condition: false
    target:
      entity_id: automation.check_all_doors
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.lights_all
  - type: turn_off
    device_id: 2e53d475d3d4aff442d2df10d6f77b24
    entity_id: switch.monitors
    domain: switch
  - service: remote.turn_off
    data: {}
    target:
      entity_id: remote.sony_bravia_tv
  - if:
    - condition: state
      entity_id: input_select.air_conditioning_mode
      state: Winter
    then:
    - service: climate.set_preset_mode
      data:
        preset_mode: away
      target:
        entity_id:
        - climate.bedroom_heater_controller
        - climate.living_room_heater_controller
        - climate.computer_fan_controller
    else:
    - service: switch.turn_off
      data: {}
      target:
        entity_id:
        - switch.plug_2_on_off
        - switch.plug_3_on_off
  - service: homeassistant.turn_off
    data: {}
    target:
      entity_id:
      - switch.mat_nas_002_home_mode
      - switch.mat_nas_001_surveillance_station_home_mode
  - service: alarm_control_panel.alarm_arm_away
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  - service: automation.turn_on
    data: {}
    target:
      entity_id:
      - automation.alarm_cameras_detected_motion
      - automation.alarm_notify_living_room
  - service: notify.mark_ios_devices
    data:
      title: ALARM
      message: The alarm was armed in Away mode by presence detection at {{ states('sensor.date_and_time')
        }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alarm
    enabled: false
  mode: single
- id: '1641696997236'
  alias: Alarm - Return Home
  description: When an occupant returns home
  trigger:
  - platform: state
    entity_id:
    - group.occupants
    to: home
    for:
      hours: 0
      minutes: 0
      seconds: 0
    from: not_home
  condition: []
  action:
  - if:
    - condition: state
      entity_id: input_select.air_conditioning_mode
      state: Winter
    then:
    - service: climate.set_preset_mode
      data:
        preset_mode: home
      target:
        entity_id:
        - climate.bedroom_heater_controller
        - climate.living_room_heater_controller
        - climate.computer_fan_controller
    else:
    - service: switch.turn_on
      data: {}
      target:
        entity_id:
        - switch.plug_2_on_off
        - switch.plug_3_on_off
  - service: homeassistant.turn_on
    data: {}
    target:
      entity_id:
      - switch.mat_nas_002_home_mode
      - switch.mat_nas_001_surveillance_station_home_mode
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.welcome_home
  - service: alarm_control_panel.alarm_disarm
    data:
      code: '3971'
    target:
      entity_id: alarm_control_panel.home_alarm
  - service: notify.mark_ios_devices
    data:
      title: ALARM
      message: The alarm was disarmed by presence detection at {{ states('sensor.date_and_time')
        }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alarm
    enabled: false
  mode: single
- id: '1641706879888'
  alias: Laundry - Finished - Notification
  description: Notification that laundry has finished
  trigger:
  - platform: state
    entity_id:
    - sensor.washing_machine_status
    to: 'Off'
    for:
      hours: 0
      minutes: 0
      seconds: 30
    from: Running
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, the laundry
        has finished and the {{ states('sensor.washing_machine_info') | lower }}.
        Hang it on the line!
  condition: []
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        message: '{{ trigger_message }}'
        title: Laundry
        data:
          push:
            interruption-level: time-sensitive
          group: Laundry
  mode: single
- id: '1642733157313'
  alias: Alert - Kitchen - Door
  description: Send notification if Kitchen door is opened
  trigger:
  - type: opened
    platform: device
    device_id: b37af0fb0e6264276fb476df525d4579
    entity_id: binary_sensor.kitchen_door_open_closed
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} door has been
        opened!'
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643240394812'
  alias: Motion - Carport
  description: Turn on the light in the Carport if motion detected after dark
  trigger:
  - type: motion
    platform: device
    device_id: 6e58e985d0d26c5577f6cbc01f5537fd
    entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
    domain: binary_sensor
    id: Started
  - type: no_motion
    platform: device
    device_id: 6e58e985d0d26c5577f6cbc01f5537fd
    entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
    domain: binary_sensor
    id: Stopped
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition: []
  action:
  - if:
    - condition: trigger
      id: Started
    - condition: sun
      after: sunset
      before: sunrise
      after_offset: '-1:00:00'
    then:
    - service: scene.turn_on
      target:
        entity_id: scene.carport_cool_bright
      metadata: {}
    else:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.carport_2
  mode: single
- id: '1643411908559'
  alias: Alert - Living Room - Motion
  description: Notification when motion is detected in the Living Room
  trigger:
  - type: motion
    platform: device
    device_id: a674e14a85bab4e885d481a556aee691
    entity_id: binary_sensor.living_room_motion
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: Motion detected in the {{ area_name(trigger.entity_id) }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643690990974'
  alias: Presence - Good Night
  description: Run when I go to bed
  trigger: []
  condition: []
  action:
  - if:
    - condition: numeric_state
      entity_id: zone.home
      above: 0
      below: 2
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: Good night {%- set people = state_attr('zone.home', 'persons') -%}
          {%- set peoplestr = state_attr(people[0], "friendly_name") -%} {% set list1
          = peoplestr.split(' ') %} {{ list1[0] }}. It's {{ now().strftime('%H:%M')
          }}. The maximum temperature tomorrow is expected to be {{ states['sensor.marsfield_temp_max_0'].state
          }} degrees. The weather in Marsfield {% if 0 >= now().hour <= 6 %}today{%
          else %}tomorrow{% endif %} is expected to be {% if 0 >= now().hour <= 6
          %}{{ states('sensor.marsfield_extended_text_0') }}{% else %}{{ states('sensor.marsfield_extended_text_1')
          }}{% endif %} Sunrise {% if 0 >= now().hour <= 6 %}this{% else %}tomorrow{%
          endif %} morning is {{ states('sensor.nextsunrise') }}. Sleep well!
        volume: '{{ states(''input_number.volume_bedtime'') }}'
    else:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: Good night. It's {{ now().strftime('%H:%M') }}. The maximum temperature
          tomorrow is expected to be {{ states['sensor.marsfield_temp_max_0'].state
          }} degrees. The weather in Marsfield {% if 0 >= now().hour <= 6 %}today{%
          else %}tomorrow{% endif %} is expected to be {% if 0 >= now().hour <= 6
          %}{{ states('sensor.marsfield_extended_text_0') }}{% else %}{{ states('sensor.marsfield_extended_text_1')
          }}{% endif %} Sunrise {% if 0 >= now().hour <= 6 %}this{% else %}tomorrow{%
          endif %} morning is {{ states('sensor.nextsunrise') }}. Sleep well!
        volume: '{{ states(''input_number.volume_bedtime'') }}'
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id:
      - input_boolean.tv_mode
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.gone_to_bed
  - service: script.alarm_night
    data: {}
  mode: single
- id: '1643694520827'
  alias: Presence - Good Morning
  description: Good morning routine
  trigger: []
  condition: []
  action:
  - if:
    - condition: numeric_state
      entity_id: zone.home
      above: 0
      below: 2
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: "Good morning {%- set people = state_attr('zone.home', 'persons')
          -%} {%- set\n peoplestr = state_attr(people[0], \"friendly_name\") -%} {%
          set list1 =\n peoplestr.split(' ') %} {{ list1[0] }}. It's {{ now().strftime('%H:%M')
          }}. {% if states['calendar.australia_nsw'] and state_attr('calendar.australia_nsw',
          'start_time') == today %}Today is {{\n state_attr('calendar.australia_nsw',
          'message') }}.{% endif %} {{ [\"Happy\",\n \"Let's attack\", \"Welcome to\",
          \"Get up and embrace\", \"Have a great\"]|random\n }} {{ now().strftime('%A')
          }}."
        volume: '{{ states(''input_number.volume_bedtime'') }}'
    else:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: Good morning. It's {{ now().strftime('%H:%M') }}. {% if states['calendar.australia_nsw']
          and state_attr('calendar.australia_nsw', 'start_time') == today %}Today
          is {{ state_attr('calendar.australia_nsw', 'message') }}.{% endif %} {{
          ["Happy", "Let's attack", "Welcome to", "Get up and embrace", "Have a great"]|random
          }} {{ now().strftime('%A') }}.
        volume: '{{ states(''input_number.volume_bedtime'') }}'
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id:
      - input_boolean.gone_to_bed
      - input_boolean.good_morning
      - input_boolean.mission_control
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.washing_machine_on_off
  - service: script.alarm_disarm
    data: {}
  mode: single
- id: '1643931984578'
  alias: Alert - Carport - Motion
  description: Notification if motion detected in the Carport
  trigger:
  - type: motion
    platform: device
    device_id: 6e58e985d0d26c5577f6cbc01f5537fd
    entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: Motion detected in the {{ area_name(trigger.entity_id) }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643945587705'
  alias: Alert - Front Gate - Door
  description: Send notification if Front gate is opened
  trigger:
  - type: opened
    platform: device
    device_id: 48009f8ce07ba0a2c677683c7b8113c4
    entity_id: binary_sensor.front_gate_open_close
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} has been opened!'
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643946467716'
  alias: Alert - Computer Cabinet - Door
  description: Send notification if Computer Cabinet door is opened
  trigger:
  - type: opened
    platform: device
    device_id: 71ce8d4859084575b814c89ce9980a09
    entity_id: binary_sensor.computer_cabinet_door_open_closed
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} door has been
        opened!'
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643946873175'
  alias: Alert - Fridge - Door
  description: Send notification if Fridge door opened
  trigger:
  - type: opened
    platform: device
    device_id: f18beed3778382faaf0ec073cd02d4c1
    entity_id: binary_sensor.fridge_door_open_closed
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} door has been
        opened!'
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643948179138'
  alias: Alert - Front Sliding - Door
  description: Send notification if Front Sliding door is opened
  trigger:
  - type: opened
    platform: device
    device_id: 1a5adcdf74437226214d88c29bd35da9
    entity_id: binary_sensor.front_sliding_door_open_closed
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} door has been
        opened!'
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643948240477'
  alias: Alert - Side Sliding - Door
  description: Send notification if Side Sliding door is opened
  trigger:
  - type: opened
    platform: device
    device_id: e9fea23e4c8b6b2d372a5c7b14b6b192
    entity_id: binary_sensor.side_sliding_door_open_close
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} door has been
        opened!'
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1643948312601'
  alias: Alert - Front - Door
  description: Send notification if Front door is opened
  trigger:
  - type: opened
    platform: device
    device_id: 3af38f2da09a901abd4f1dd2105f7a7c
    entity_id: binary_sensor.front_door_open_closed
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} door has been
        opened!'
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '987654123'
  alias: Alarm - Check - Doors
  description: Chekc that all doors are closed. Run when leaving home and going to
    bed
  trigger: []
  condition: []
  action:
  - if:
    - condition: numeric_state
      entity_id: sensor.number_of_doors_open
      above: 0
    then:
    - if:
      - condition: state
        entity_id: person.mark_matheson
        state: not_home
      then:
      - service: notify.notify
        data_template:
          title: ALARM
          message: "Hey {{ [\"doofus\", \"moron\", \"idiot\", \"clown\", \"goose\",
            \"jackass\", \"ninny\",\n  \"dork\", \"nitwit\", \"turkey\", \"nincompoop\",
            \"knucklehead\", \"dummy\",\n  \"ding-a-ling\", \"dipstick\", \"ding-dong\",
            \"half-wit\", \"numbskull\", \"fathead\",\n  \"butt-head\", \"dumbbell\",
            \"chump\", \"dunce\", \"dodo\"] | random }}, the {{ states('sensor.what_doors_are_open')
            }} {% if is_state('sensor.number_of_doors_open' ,'1') %}door is{% else
            %}doors are{% endif %} open!\n"
          data:
            subtitle: Doors Open!
            push:
              interruption-level: critical
            group: Alarm
        alias: 'Notification: Doors open - CRITICAL'
      else:
      - service: notify.notify
        data_template:
          title: ALARM
          message: "Hey {{ [\"doofus\", \"moron\", \"idiot\", \"clown\", \"goose\",
            \"jackass\", \"ninny\",\n  \"dork\", \"nitwit\", \"turkey\", \"nincompoop\",
            \"knucklehead\", \"dummy\",\n  \"ding-a-ling\", \"dipstick\", \"ding-dong\",
            \"half-wit\", \"numbskull\", \"fathead\",\n  \"butt-head\", \"dumbbell\",
            \"chump\", \"dunce\", \"dodo\"] | random }}, the {{ states('sensor.what_doors_are_open')
            }} {% if is_state('sensor.number_of_doors_open' ,'1') %}door is{% else
            %}doors are{% endif %} open!\n"
          data:
            subtitle: Doors Open!
            push:
              interruption-level: time-sensitive
            group: Alarm
        alias: 'Notification: Doors open - TIME SENSITIVE'
    alias: Confirm number of Doors open is above 0
    else:
    - service: notify.notify
      data_template:
        title: ALARM
        message: "Hey {{ [\"doofus\", \"moron\", \"idiot\", \"clown\", \"goose\",
          \"jackass\", \"ninny\",\n  \"dork\", \"nitwit\", \"turkey\", \"nincompoop\",
          \"knucklehead\", \"dummy\",\n  \"ding-a-ling\", \"dipstick\", \"ding-dong\",
          \"half-wit\", \"numbskull\", \"fathead\",\n  \"butt-head\", \"dumbbell\",
          \"chump\", \"dunce\", \"dodo\"] | random }}, no Doors are open!\n"
        data:
          subtitle: Doors Open!
          push:
            interruption-level: time-sensitive
          group: Alarm
      alias: 'Notification: No Doors open'
      enabled: false
- id: '1644025461137'
  alias: Alert - Bedroom - Motion
  description: Send notification if motion detected in the Bedroom
  trigger:
  - type: motion
    platform: device
    device_id: 4902d5785909000e1e5d0f58a8087cc1
    entity_id: binary_sensor.bedroom_motion_ias_zone
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: Motion detected in the {{ area_name(trigger.entity_id) }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1644026286925'
  alias: Motion - Bedroom
  description: Action when motion detected in the bedroom
  trigger:
  - type: motion
    platform: device
    device_id: 4902d5785909000e1e5d0f58a8087cc1
    entity_id: binary_sensor.bedroom_motion_ias_zone
    domain: binary_sensor
    id: started
  - type: no_motion
    platform: device
    device_id: 4902d5785909000e1e5d0f58a8087cc1
    entity_id: binary_sensor.bedroom_motion_ias_zone
    domain: binary_sensor
    id: stopped
  condition:
  - condition: sun
    before: sunrise
    after: sunset
    after_offset: -01:00:00
    enabled: false
  - type: is_illuminance
    condition: device
    device_id: 4902d5785909000e1e5d0f58a8087cc1
    entity_id: sensor.bedroom_motion_illuminance
    domain: sensor
    below: 125
    enabled: false
  - condition: or
    conditions:
    - condition: state
      entity_id: input_boolean.napping
      state: 'off'
      enabled: false
    - condition: state
      entity_id: input_boolean.gone_to_bed
      state: 'off'
    enabled: false
  - condition: state
    entity_id: group.asleep
    state: 'off'
  action:
  - if:
    - condition: trigger
      id: started
    then:
    - service: scene.turn_on
      target:
        entity_id: scene.bedroom_cool_bright
      metadata: {}
    else:
    - service: light.turn_off
      data: {}
      target:
        area_id: 0510cb6310c211eb9a508b079e9925be
  mode: single
- id: '1644027198139'
  alias: Alert - Toilet - Motion
  description: Send a notification if motion detected in the Toilet
  trigger:
  - type: motion
    platform: device
    device_id: e568296ada5965b277294d65fe9acc97
    entity_id: binary_sensor.toilet_motion_ias_zone
    domain: binary_sensor
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: Motion detected in the {{ area_name(trigger.entity_id) }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1644036481085'
  alias: Alert - Kitchen - Motion
  description: Send a notification if motion detected in the Kitchen
  trigger:
  - type: motion
    platform: device
    device_id: dd2d3b47331ac2a55603b79c393fcb85
    entity_id: binary_sensor.kitchen_motion_ias_zone
    domain: binary_sensor
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: ALERT
      message: Motion detected in the {{ area_name(trigger.entity_id) }}
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1644036578578'
  alias: Motion - Kitchen
  description: Action when motion detected in the Kitchen
  trigger:
  - type: motion
    platform: device
    device_id: dd2d3b47331ac2a55603b79c393fcb85
    entity_id: binary_sensor.kitchen_motion_ias_zone
    domain: binary_sensor
    id: started
  - type: no_motion
    platform: device
    device_id: dd2d3b47331ac2a55603b79c393fcb85
    entity_id: binary_sensor.kitchen_motion_ias_zone
    domain: binary_sensor
    id: stopped
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition:
  - condition: sun
    before: sunrise
    after: sunset
    after_offset: -02:00:00
    enabled: false
  - type: is_illuminance
    condition: device
    device_id: dd2d3b47331ac2a55603b79c393fcb85
    entity_id: sensor.kitchen_motion_illuminance
    domain: sensor
    below: 125
  action:
  - if:
    - condition: trigger
      id: started
    then:
    - service: scene.turn_on
      target:
        entity_id: scene.kitchen_cool_bright
      metadata: {}
    else:
    - service: light.turn_off
      data: {}
      target:
        area_id: 0510b87a10c211eba795d1d20eab3950
  mode: queued
  max: 10
- id: '1644036643327'
  alias: Motion - Kitchen - Empty
  description: Action when the Kitchen is no longer occupied
  trigger:
  - type: no_motion
    platform: device
    device_id: dd2d3b47331ac2a55603b79c393fcb85
    entity_id: binary_sensor.kitchen_motion_ias_zone
    domain: binary_sensor
    for:
      hours: 0
      minutes: 0
      seconds: 0
  condition: []
  action:
  - type: turn_off
    device_id: 5528165710c211eba4d0b5150819a202
    entity_id: light.kitchen
    domain: light
    enabled: false
  mode: single
- id: '1644038123997'
  alias: Motion - Living Room
  description: Action when motion detected in the Living Room
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_sensors_living_room
    to: 'on'
    id: started
  - platform: state
    entity_id:
    - binary_sensor.motion_sensors_living_room
    to: 'off'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition:
  - condition: sun
    before: sunrise
    after: sunset
    after_offset: -01:00:00
    enabled: false
  - condition: state
    entity_id: input_boolean.tv_mode
    state: 'off'
    enabled: false
  - type: is_illuminance
    condition: device
    device_id: a674e14a85bab4e885d481a556aee691
    entity_id: sensor.living_room_motion_light_level
    domain: sensor
    below: 8
    enabled: false
  action:
  - if:
    - condition: trigger
      id: started
    then:
    - service: scene.turn_on
      target:
        entity_id: scene.living_room_energize
      metadata: {}
    else:
    - if:
      - condition: time
        weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
        after: '23:00:00'
        before: '17:00:00'
      then:
      - service: light.turn_off
        data: {}
        target:
          area_id: 0510a56110c211eb8cb82f454df44b20
  mode: single
- id: '1644038216774'
  alias: Motion - Living Room - Empty
  description: Action when the Living Room is no longer occupied
  trigger:
  - type: no_motion
    platform: device
    device_id: a674e14a85bab4e885d481a556aee691
    entity_id: binary_sensor.living_room_motion
    domain: binary_sensor
    for:
      hours: 0
      minutes: 0
      seconds: 0
    id: Living Room Stopped
  - type: no_motion
    platform: device
    device_id: 4b9b6aa1031bf88101700ce43ff894d6
    entity_id: binary_sensor.entertainment_motion_on_off
    domain: binary_sensor
    for:
      hours: 0
      minutes: 0
      seconds: 0
    id: Entertainment Stopped
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.living_room
  mode: single
- id: '1644039967092'
  alias: Motion - Stairs
  description: Action when motion detected on the stairs
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.motion_sensors_stairs
    to: 'on'
    id: started
  - platform: state
    entity_id:
    - binary_sensor.motion_sensors_stairs
    to: 'off'
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition:
  - condition: sun
    before: sunrise
    after: sunset
    after_offset: -01:00:00
    enabled: false
  - type: is_illuminance
    condition: device
    device_id: 1d7d59d94c75d97244521d56052b20ad
    entity_id: sensor.downstairs_motion_illuminance
    domain: sensor
    below: 125
    enabled: false
  action:
  - if:
    - condition: trigger
      id: started
    then:
    - if:
      - condition: state
        entity_id: input_boolean.gone_to_bed
        state: 'on'
      then:
      - service: scene.turn_on
        target:
          entity_id: scene.stairs_dimmed
        metadata: {}
      else:
      - service: scene.turn_on
        target:
          entity_id: scene.stairs_cool_bright
        metadata: {}
    else:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.stairs_2
  mode: single
- id: '1644051032707'
  alias: Motion - Bedroom - Empty
  description: ''
  trigger:
  - type: no_motion
    platform: device
    device_id: 4902d5785909000e1e5d0f58a8087cc1
    entity_id: binary_sensor.bedroom_motion_ias_zone
    domain: binary_sensor
    for:
      hours: 0
      minutes: 1
      seconds: 0
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      area_id: 0510cb6310c211eb9a508b079e9925be
  - type: turn_off
    device_id: 5525a09210c211eb86e29315da6926e5
    entity_id: light.bedroom
    domain: light
    enabled: false
  - type: turn_off
    device_id: f15eee532435ea616e47f3068e8385f6
    entity_id: light.bedside_left
    domain: light
    enabled: false
  - type: turn_off
    device_id: c3f1e77e59272e72ee30310601772de1
    entity_id: light.bedside_right
    domain: light
    enabled: false
  mode: single
- id: '1644052703483'
  alias: Motion - Carport - Empty
  description: Action when Carport is no longer occupied
  trigger:
  - type: no_motion
    platform: device
    device_id: 6e58e985d0d26c5577f6cbc01f5537fd
    entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
    domain: binary_sensor
  condition: []
  action:
  - type: turn_off
    device_id: 552c3ef710c211eb871deb8bffd84c1d
    entity_id: light.carport
    domain: light
  mode: single
- id: '1644124332188'
  alias: Motion - Toilet
  description: Action if motion is detected in the Toilet
  trigger:
  - type: motion
    platform: device
    device_id: e568296ada5965b277294d65fe9acc97
    entity_id: binary_sensor.toilet_motion_ias_zone
    domain: binary_sensor
    id: Started
  - type: no_motion
    platform: device
    device_id: e568296ada5965b277294d65fe9acc97
    entity_id: binary_sensor.toilet_motion_ias_zone
    domain: binary_sensor
    for:
      hours: 0
      minutes: 1
      seconds: 30
    id: Stopped
  condition: []
  action:
  - if:
    - condition: trigger
      id: Started
    then:
    - if:
      - condition: state
        entity_id: input_boolean.gone_to_bed
        state: 'on'
      then:
      - service: light.turn_on
        data:
          brightness_pct: 30
        target:
          area_id: toilet
      - service: scene.turn_on
        target:
          entity_id: scene.toilet_dimmed
        metadata: {}
      else:
      - service: scene.turn_on
        target:
          entity_id: scene.toilet_cool_bright
        metadata: {}
    else:
    - service: light.turn_off
      data: {}
      target:
        area_id: toilet
  mode: single
- id: '1644124483346'
  alias: Motion - Toilet - Empty
  description: Action if no motion detected in the Toilet
  trigger:
  - type: no_motion
    platform: device
    device_id: e568296ada5965b277294d65fe9acc97
    entity_id: binary_sensor.toilet_motion_ias_zone
    domain: binary_sensor
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition: []
  action:
  - type: turn_off
    device_id: d30776ae7f3025d98a846a8b5bde96ef
    entity_id: light.hue_ambiance_lamp_1
    domain: light
  mode: single
- id: '1646471713255'
  alias: Computer Cabinet - Lights On
  description: Turn on the computer cabinet lights at sunset
  trigger:
  - platform: sun
    event: sunset
    offset: 0
  condition:
  - condition: state
    entity_id: person.mark_matheson
    state: home
  action:
  - service: scene.turn_on
    target:
      entity_id: scene.computer_cabinet_motown
    data:
      transition: 5
  mode: single
- id: '1652832922305'
  alias: Alarm - Intruder
  description: Broadcast a message when an intruder is detected
  trigger: []
  condition: []
  action:
  - service: script.broadcast_message
    data:
      entity_id: media_player.media_player_all
      message: Intruder! Intruder! Intruder!
      volume: '{{ states(''input_number.intruder_volume'') }}'
  mode: single
- id: '1656290905830'
  alias: Alarm - Night - Trigger
  description: Detect when the alarm is triggered with a door opening or motion detected
  trigger:
  - platform: state
    entity_id: binary_sensor.office_motion
    to: 'on'
    variables:
      trigger_message: Movement detected in the Office!
    enabled: false
  - platform: state
    entity_id: binary_sensor.living_room_motion
    to: 'on'
    variables:
      trigger_message: Movement detected in the Living Room!
  - platform: state
    entity_id: binary_sensor.kitchen_motion_ias_zone
    to: 'on'
    variables:
      trigger_message: Movement detected in the Kitchen!
  - platform: state
    entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
    to: 'on'
    variables:
      trigger_message: Movement detected in the Carport!
  - platform: state
    entity_id: binary_sensor.computer_cabinet_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Computer Cabinet door was opened!
    enabled: false
  - platform: state
    entity_id: binary_sensor.front_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Front door was opened!
  - platform: state
    entity_id: binary_sensor.kitchen_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Kitchen door was opened!
  - platform: state
    entity_id: binary_sensor.side_sliding_door_open_close
    to: 'on'
    variables:
      trigger_message: The Side Sliding door was opened!
  - platform: state
    entity_id: binary_sensor.front_sliding_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Front Sliding door was opened!
  - platform: state
    entity_id: binary_sensor.fridge_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Fridge door was opened!
  - platform: state
    entity_id:
    - binary_sensor.front_gate_open_close
    to: 'on'
    variables:
      trigger_message: The Front gate was opened!
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_night
  action:
  - service: alarm_control_panel.alarm_trigger
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  - service: notify.mark_ios_devices
    data:
      message: '{{ trigger_message }}'
      title: ALARM
      data:
        push:
          interruption-level: time-sensitive
        group: Alarm
  - if:
    - type: is_motion
      condition: device
      device_id: 552e5c6b8bf427f6d06d068c91cfab2a
      entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
      domain: binary_sensor
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.intruder_bedtime'') }}'
      enabled: false
    else:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.intruder_volume'') }}'
  mode: single
- id: '1656291260826'
  alias: Alarm - Away - Trigger
  description: Detect when the alarm is triggered with a door opening or motion detected
  trigger:
  - platform: numeric_state
    entity_id: sensor.number_of_motion_sensors_active
    above: 0
    variables:
      trigger_message: Motion:-{{ '\n - ' + states('sensor.what_motion_sensors_are_active')
        }}
      trigger_heading: Active Motion
  - platform: numeric_state
    entity_id: sensor.number_of_doors_open
    above: 0
    variables:
      trigger_message: Doors:-{{ '\n - ' + states('sensor.what_doors_are_open') }}
      trigger_heading: Doors Open
  - platform: state
    entity_id: binary_sensor.office_motion
    to: 'on'
    variables:
      trigger_message: Movement detected in the Office!
    enabled: false
  - platform: state
    entity_id: binary_sensor.living_room_motion
    to: 'on'
    variables:
      trigger_message: Movement detected in the Living Room!
    enabled: false
  - platform: state
    entity_id: binary_sensor.kitchen_motion_ias_zone
    to: 'on'
    variables:
      trigger_message: Movement detected in the Kitchen!
    enabled: false
  - platform: state
    entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
    to: 'on'
    variables:
      trigger_message: Movement detected in the Carport!
    enabled: false
  - platform: state
    entity_id: binary_sensor.bedroom_motion_ias_zone
    to: 'on'
    variables:
      trigger_message: Movement detected in the Bedroom!
    enabled: false
  - platform: state
    entity_id: binary_sensor.upstairs_motion_iaszone
    to: 'on'
    variables:
      trigger_message: Movement detected on the Stairs!
    enabled: false
  - platform: state
    entity_id: binary_sensor.toilet_motion_ias_zone
    to: 'on'
    variables:
      trigger_message: Movement detected in the Toilet!
    enabled: false
  - platform: state
    entity_id: binary_sensor.computer_cabinet_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Computer Cabinet door was opened!
    enabled: false
  - platform: state
    entity_id: binary_sensor.fridge_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Fridge door was opened!
    enabled: false
  - platform: state
    entity_id: binary_sensor.front_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Front door was opened!
    enabled: false
  - platform: state
    entity_id: binary_sensor.kitchen_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Kitchen door was opened!
    enabled: false
  - platform: state
    entity_id: binary_sensor.side_sliding_door_open_close
    to: 'on'
    variables:
      trigger_message: The Side Sliding door was opened!
    enabled: false
  - platform: state
    entity_id: binary_sensor.front_sliding_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Front Sliding door was opened!
    enabled: false
  - platform: state
    entity_id: binary_sensor.front_gate_open_close
    to: 'on'
    variables:
      trigger_message: The Front gate was opened!
    enabled: false
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_away
    enabled: true
  action:
  - service: alarm_control_panel.alarm_trigger
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  - service: notify.mark_ios_devices
    data:
      message: '{{ trigger_message }}'
      title: '{{ trigger_heading }}'
      data:
        push:
          interruption-level: time-sensitive
        group: Alarm
  - service: script.broadcast_message
    data:
      entity_id: media_player.media_player_all
      message: '{{ trigger_message }}'
      volume: '{{ states(''input_number.intruder_volume'') }}'
  mode: single
- id: '1656291353092'
  alias: Alarm - Downstairs - Trigger
  description: Detect when the alarm is triggered with a door opening or motion detected
  trigger:
  - platform: state
    entity_id: binary_sensor.living_room_motion
    to: 'on'
    variables:
      trigger_message: Movement detected in the Living Room!
  - platform: state
    entity_id: binary_sensor.kitchen_motion_ias_zone
    to: 'on'
    variables:
      trigger_message: Movement detected in the Kitchen!
  - platform: state
    entity_id: binary_sensor.fridge_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Fridge door was opened!
  - platform: state
    entity_id: binary_sensor.front_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Front door was opened!
  - platform: state
    entity_id: binary_sensor.kitchen_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Kitchen door was opened!
  - platform: state
    entity_id: binary_sensor.side_sliding_door_open_close
    to: 'on'
    variables:
      trigger_message: The Side Sliding door was opened!
  - platform: state
    entity_id: binary_sensor.front_sliding_door_open_closed
    to: 'on'
    variables:
      trigger_message: The Front Sliding door was opened!
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_home
  action:
  - service: alarm_control_panel.alarm_trigger
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  - service: notify.mark_ios_devices
    data:
      message: '{{ trigger_message }}'
      title: ALARM
      data:
        push:
          interruption-level: critical
        group: Alarm
  - service: script.broadcast_message
    data:
      entity_id: media_player.media_player_all
      message: '{{ trigger_message }}'
      volume: '{{ states(''input_number.intruder_volume'') }}'
  mode: single
- id: '1656291656778'
  alias: Alarm - Outside - Trigger
  description: Detect when the alarm is triggered with a door opening or motion detected
  trigger:
  - platform: state
    entity_id: binary_sensor.lumi_lumi_motion_ac02_motion
    to: 'on'
    variables:
      trigger_message: Motion detected in the Carport!
  - platform: state
    entity_id: binary_sensor.front_gate_open_close
    to: 'on'
    variables:
      trigger_message: The Front gate was opened!
  condition:
  - condition: state
    entity_id: alarm_control_panel.home_alarm
    state: armed_vacation
  action:
  - service: alarm_control_panel.alarm_trigger
    data: {}
    target:
      entity_id: alarm_control_panel.home_alarm
  - service: notify.mark_ios_devices
    data:
      message: '{{ trigger_message }}'
      title: ALARM
      data:
        push:
          interruption-level: time-sensitive
        group: Alarm
  - service: script.broadcast_message
    data:
      entity_id: media_player.media_player_all
      message: '{{ trigger_message }}'
      volume: '{{ states(''input_number.intruder_volume'') }}'
  - service: script.intruder_alert
    data: {}
    enabled: false
  mode: single
- id: '1656319297567'
  alias: Backup - Failure - Notification
  description: ''
  trigger:
  - platform: event
    event_type: auto_backup.backup_failed
  action:
  - service: persistent_notification.create
    data:
      title: Backup Failed
      message: 'Name: {{ trigger.event.data.name }}

        Error: {{ trigger.event.data.error }}'
  - service: notify.mobile_app_marks_iphone
    data_template:
      title: Backup Failed
      message: 'Name: {{ trigger.event.data.name }}

        Error: {{ trigger.event.data.error }}'
      data:
        push:
          interruption-level: time-sensitive
        group: Backup
- id: '1656319761157'
  alias: Backup - Success - Notification
  description: ''
  trigger:
  - platform: event
    event_type: auto_backup.backup_successful
  action:
  - service: persistent_notification.create
    data:
      title: Backup Succeeded
      message: 'Name: {{ trigger.event.data.name }}

        Details: {{ trigger.event.data.slug }}'
    enabled: false
  - if:
    - condition: state
      entity_id: input_boolean.backup_notifications
      state: 'on'
    then:
    - service: persistent_notification.create
      data:
        title: Backup Succeeded
        message: 'Name: {{ trigger.event.data.name }}

          Details: {{ trigger.event.data.slug }}'
- id: '1656320271921'
  alias: Backup - Purged - Notification
  description: ''
  trigger:
  - platform: event
    event_type: auto_backup.purged_backups
  action:
  - service: persistent_notification.create
    data:
      title: Backups Purged
      message: 'Backups: {{ trigger.event.data.backups }}'
    enabled: false
  - if:
    - condition: state
      entity_id: input_boolean.backup_notifications
      state: 'on'
    then:
    - service: persistent_notification.create
      data:
        title: Backups Purged
        message: 'Backups: {{ trigger.event.data.backups }}'
- id: '1656372972517'
  alias: System - Error Counting Automation
  description: ''
  trigger:
  - platform: event
    event_type: system_log_event
    event_data:
      level: ERROR
  action:
  - service: counter.increment
    data: {}
    target:
      entity_id: counter.error_counter
- id: '1656392838193'
  alias: System - Do Nothing
  description: 'REQUIRED: For Cash box and other non-existent devices'
  trigger: []
  condition: []
  action:
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  mode: single
- id: '1656546975101'
  alias: System - Updates - Persistent Notification
  description: Send notifications for new updates and install or skip on action
  use_blueprint:
    path: mdegat01/update_notifications.yaml
    input:
      reminder_hours: '12'
      update_entities:
      - update.home_assistant_core_update
      - update.home_assistant_supervisor_update
      - update.mat_rt_001
      - update.mat_sw_001
      - update.mat_sw_002
      - update.mat_sw_003
      - update.mat_ap_001
      - update.mat_ap_002
      - update.mat_nas_001_dsm_update
      - update.mat_nas_002_dsm_update
      - update.pi_hole_core_update_available
      - update.pi_hole_ftl_update_available
      - update.pi_hole_web_update_available
      - update.appdaemon_update
      - update.studio_code_server_update
      - update.terminal_ssh_update
      mobile_app_device: 1480787f10c411ebbe23d58340432c5c
      send_to_ha: true
      run_config_check: true
      only_after: 07:30:00
      only_before: '21:30:00'
      mobile_app_device_2: 788af8b168b674ebd5ac1dd62081f1d8
      changelog_urls: {}
      status_bar_icon: mdi:package-up
- id: '1656674908197'
  alias: HASS - Restarted
  description: When Home Assistant restarts
  trigger:
  - platform: homeassistant
    event: start
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.lights_all
    enabled: false
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
    enabled: false
  - service: script.check_config
    data: {}
    enabled: false
  - service: persistent_notification.create
    data:
      message: Home Assistant (Core) restarted
      title: System Notification
    enabled: false
  - service: script.dropbox_sync
    data: {}
  - service: notify.mark_ios_devices
    data:
      message: Home Assistant has restarted!
      title: System
      data:
        group: System
        push:
          interruption-level: time-sensitive
    enabled: false
  mode: single
- id: '1656887737576'
  alias: Alarm - Courtyard - Notification
  description: Send a message if motion detected motion in the Courtyard
  trigger:
  - platform: state
    entity_id:
    - camera.mat_nas_002_courtyard_2
    to: recording
  condition: []
  action:
  - service: camera.snapshot
    data:
      filename: /config/www/courtyard.jpg
    target:
      entity_id: camera.mat_nas_002_courtyard_2
  - service: notify.mark_ios_devices
    data:
      message: Motion detected in the Courtyard!
      data:
        image: /local/courtyard.jpg
        push:
          interruption-level: time-sensitive
        group: Alarm
  mode: single
- id: '1656888890938'
  alias: Alarm - Living Room - Notification
  description: Send a message if any motion detected in Living Room
  trigger:
  - platform: state
    entity_id:
    - camera.mat_nas_002_living_room
    to: recording
  condition: []
  action:
  - service: camera.snapshot
    data:
      filename: /config/www/living_room.jpg
    target:
      entity_id: camera.mat_nas_002_living_room
  - service: notify.mark_ios_devices
    data:
      message: Motion detected in the Living Room!
      data:
        image: /local/living_room.jpg
        push:
          interruption-level: time-sensitive
        group: Alarm
  mode: single
- id: '1657070132161'
  alias: HASS - Stopped - Notification
  description: What happens when Home Assistant is stopped
  trigger:
  - platform: homeassistant
    event: shutdown
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      message: Home Assistant is restarting!
      title: System
      data:
        group: System
        push:
          interruption-level: time-sensitive
  mode: single
- id: '1673492160329'
  alias: Mini Switch - Good Night
  description: Run Good Night routine when the switch is clicked
  trigger:
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
  condition: []
  action:
  - if:
    - condition: numeric_state
      entity_id: zone.home
      above: 0
      below: 2
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: Good night {% set people = state_attr('zone.home', 'persons') %}
          {% set peoplestr = state_attr(people[0], "friendly_name") %} {% set list1
          = peoplestr.split(' ') %} {{ list1[0] }}
        volume: 0.3
    else:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: Good night
        volume: 0.3
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id:
      - input_boolean.good_morning
      - input_boolean.tv_mode
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.gone_to_bed
  - service: script.alarm_night
    data: {}
  mode: single
- id: '1673492658022'
  alias: Mini Switch - Good Morning
  description: Run Good Morning routine when the switch is double-clicked
  trigger:
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: remote_button_double_press
  condition: []
  action:
  - if:
    - condition: numeric_state
      entity_id: zone.home
      above: 0
      below: 2
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: Good morning {% set people = state_attr('zone.home', 'persons') %}
          {% set peoplestr = state_attr(people[0], "friendly_name") %} {% set list1
          = peoplestr.split(' ') %} {{ list1[0] }}
        volume: 0.3
    else:
    - service: script.broadcast_message
      data:
        entity_id: media_player.master_bedroom_speaker
        message: Good morning
        volume: 0.3
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.gone_to_bed
  - service: script.alarm_disarm
    data: {}
  mode: single
- id: '1673604685901'
  alias: Presence - Good Morning - Living Room
  description: Broadcast a good morning message on the Living Room speakers
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.living_room_motion
    to: 'on'
  condition:
  - condition: state
    entity_id: input_boolean.good_morning
    state: 'off'
  action:
  - if:
    - condition: numeric_state
      entity_id: zone.home
      above: 0
      below: 2
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.living_room_speaker
        message: Good morning {%- set people = state_attr('zone.home', 'persons')
          -%} {%- set peoplestr = state_attr(people[0], "friendly_name") -%} {% set
          list1 = peoplestr.split(' ') %} {{ list1[0] }}! It's {{ now().strftime('%H:%M,
          %A %d %B %Y') }}. {% if states['calendar.australia_nsw'] and state_attr('calendar.australia_nsw',
          'start_time') == today %}Today is {{ state_attr('calendar.australia_nsw',
          'message') }}.{% endif %} The current temperature in Marsfield is {{ states['sensor.sydney_olympic_park_temp'].state
          }} degrees heading for an expected maximum of {{ states['sensor.marsfield_temp_max_0'].state
          }} degrees. The weather is forecast to be {{ states['sensor.marsfield_extended_text_0'].state
          }}. {{ states['sensor.marsfield_uv_summary'].state }}. {{ states['sensor.marsfield_fire_danger_summary'].state
          }}. Sunset is at {{ states['sensor.nextsunset'].state }}. {% if states('sensor.rubbish_bin')
          == 'tomorrow' %} Remember, the rubbish and {% if states['sensor.greens_bin'].state
          == "tomorrow" %}greens{% else %}recycling{% endif %} bins need to go out
          tonight.{%- endif -%} {% if states('sensor.rubbish_bin') == 'today' and
          states('input_boolean.rubbish_bins') == 'on'%} Remember to bring in the
          rubbish and {% if states['sensor.greens_bin'].state == "today" %}greens{%
          else %}recycling{% endif %} bins.{%- endif -%} Have a great day!
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: script.broadcast_message
      data:
        entity_id: media_player.living_room_speaker
        message: Good morning! It's {{ now().strftime('%H:%M, %A %d %B %Y') }}. {%
          if states['calendar.australia_nsw'] and state_attr('calendar.australia_nsw',
          'start_time') == today %}Today is {{ state_attr('calendar.australia_nsw',
          'message') }}.{% endif %} The current temperature in Marsfield is {{ states['sensor.sydney_olympic_park_temp'].state
          }} degrees heading for an expected maximum of {{ states['sensor.marsfield_temp_max_0'].state
          }} degrees. The weather is forecast to be {{ states['sensor.marsfield_extended_text_0'].state
          }}. {{ states['sensor.marsfield_uv_summary'].state }}. {{ states['sensor.marsfield_fire_danger_summary'].state
          }}. Sunset is at {{ states['sensor.nextsunset'].state }}. {% if states('sensor.rubbish_bin')
          == 'tomorrow' %} Remember, the rubbish and {% if states['sensor.greens_bin'].state
          == "tomorrow" %}greens{% else %}recycling{% endif %} bins need to go out
          tonight.{%- endif -%} {% if states('sensor.rubbish_bin') == 'today' and
          states('input_boolean.rubbish_bins') == 'on'%} Remember to bring in the
          rubbish and {% if states['sensor.greens_bin'].state == "today" %}greens{%
          else %}recycling{% endif %} bins.{%- endif -%} Have a great day!
        volume: '{{ states(''input_number.volume_default'') }}'
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.good_morning
  mode: single
- id: '1673608588366'
  alias: TV Mode - On
  description: Long press of the Dimmer On button
  trigger:
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: repeat
    subtype: 1
    unique_id: d6fdb9ab-eac0-434e-84b0-acd4f8ea8d2a
  condition: []
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.tv_mode
  - service: hue.activate_scene
    data:
      transition: 5
    target:
      entity_id:
      - scene.living_room_motown
      - scene.clock_golden_pond
  - service: scene.turn_on
    target:
      entity_id: scene.living_room_motown
    metadata: {}
    enabled: false
  - service: script.broadcast_message
    data:
      entity_id: media_player.living_room_speaker
      message: TV Mode activated
      volume: '{{ states(''input_number.volume_default'') }}'
    enabled: false
  mode: single
- id: '1673609355346'
  alias: TV Mode - Off
  description: Long press of the Dimmer Off button
  trigger:
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: repeat
    subtype: 4
    unique_id: e5dc2677-fca5-4963-adef-f6810aefc013
  condition: []
  action:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.tv_mode
  - service: hue.activate_scene
    data:
      transition: 5
    target:
      entity_id: scene.living_room_energize
  - type: turn_off
    device_id: f059123f26bf3a500b67026bb509fb57
    entity_id: light.clock
    domain: light
  - service: scene.turn_on
    target:
      entity_id: scene.living_room_energize
    metadata: {}
    enabled: false
  - service: script.broadcast_message
    data:
      entity_id: media_player.living_room_speaker
      message: TV Mode deactivated
      volume: '{{ states(''input_number.volume_default'') }}'
    enabled: false
  mode: single
- id: '1673610647714'
  alias: Dimmer - Long Press - Stairs On
  description: Brightness button is held down on Dimmer
  trigger:
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: repeat
    subtype: 2
    unique_id: e13a0937-052e-4b64-bc59-01a795449f6d
  condition: []
  action:
  - service: scene.turn_on
    target:
      entity_id: scene.stairs_energize
    metadata: {}
  - service: media_player.media_pause
    data: {}
    target:
      entity_id:
      - media_player.plex_for_apple_tv
  - service: script.broadcast_message
    data:
      entity_id: media_player.living_room_speaker
      message: Media player paused
      volume: 0.4
  mode: single
- id: '1673610804937'
  alias: Dimmer - Long Press - Stairs Off
  description: Dim button long pressed on Dimmer
  trigger:
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: repeat
    subtype: 3
    unique_id: 0c6f5939-a645-4cc9-8385-21a4f5eaad77
  condition: []
  action:
  - service: script.broadcast_message
    data:
      entity_id: media_player.living_room_speaker
      message: Media player resuming
      volume: 0.4
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.stairs_2
  - service: media_player.media_play
    data: {}
    target:
      entity_id:
      - media_player.plex_for_apple_tv
  mode: single
- id: '1673752990391'
  alias: TV Mode - Automated
  description: Automated TV Mode when something starts playing in Plex on the Apple
    TV after sunset
  trigger:
  - platform: device
    device_id: 731e28c5e96afde86154757ac1d40083
    domain: media_player
    entity_id: media_player.plex_for_apple_tv
    type: playing
  - platform: device
    device_id: 731e28c5e96afde86154757ac1d40083
    domain: media_player
    entity_id: media_player.plex_for_apple_tv
    type: paused
    for:
      hours: 0
      minutes: 0
      seconds: 20
  condition:
  - condition: sun
    before: sunrise
    after: sunset
  - condition: state
    entity_id: input_boolean.use_tv_mode
    state: 'on'
  action:
  - if:
    - condition: device
      device_id: 731e28c5e96afde86154757ac1d40083
      domain: media_player
      entity_id: media_player.plex_for_apple_tv
      type: is_paused
    then:
    - service: input_boolean.turn_off
      data: {}
      target:
        entity_id: input_boolean.tv_mode
    - service: hue.activate_scene
      data:
        transition: 5
      target:
        entity_id: scene.living_room_energize
    - type: turn_off
      device_id: f059123f26bf3a500b67026bb509fb57
      entity_id: light.clock
      domain: light
    - service: script.broadcast_message
      data:
        entity_id: media_player.living_room_speaker
        message: TV Mode deactivated
        volume: '{{ states(''input_number.volume_default'') }}'
      enabled: false
    else:
    - service: input_boolean.turn_on
      data: {}
      target:
        entity_id: input_boolean.tv_mode
    - service: hue.activate_scene
      data:
        transition: 5
      target:
        entity_id:
        - scene.living_room_motown
        - scene.clock_golden_pond
    - service: script.broadcast_message
      data:
        entity_id: media_player.living_room_speaker
        message: TV Mode activated
        volume: '{{ states(''input_number.volume_default'') }}'
      enabled: false
  mode: single
- id: '1673773313356'
  alias: TV Mode - Sunset
  description: Sunset routine for TV Mode
  trigger:
  - platform: sun
    event: sunset
    offset: 0
  condition:
  - condition: device
    device_id: 731e28c5e96afde86154757ac1d40083
    domain: media_player
    entity_id: media_player.plex_for_apple_tv
    type: is_playing
  - condition: state
    entity_id: input_boolean.use_tv_mode
    state: 'on'
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.tv_mode
  - service: hue.activate_scene
    data:
      transition: 5
    target:
      entity_id: scene.living_room_motown
  - service: script.broadcast_message
    data:
      entity_id: media_player.living_room_speaker
      message: TV Mode activated
      volume: '{{ states(''input_number.volume_default'') }}'
  mode: single
- id: '1673821720335'
  alias: Mini Switch - Toggle
  description: Toggle Good Night/Morning based on state of Gone to Bed boolean
  trigger:
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
    id: pressed
  condition: []
  action:
  - if:
    - condition: state
      entity_id: input_boolean.gone_to_bed
      state: 'on'
    then:
    - service: automation.trigger
      data: {}
      target:
        entity_id: automation.good_morning
    else:
    - service: automation.trigger
      data: {}
      target:
        entity_id: automation.good_night
  - service: input_datetime.set_datetime
    data:
      time: '{{ now().strftime(''%H:%M:%S'') }}'
    target:
      entity_id: input_datetime.out_of_bed
  mode: single
- id: '1673829847569'
  alias: System - HACS Update - Persistent Notification
  description: Persistent Notification when there is a HACS component update available
  trigger:
  - above: '0'
    entity_id: sensor.hacs
    platform: numeric_state
  condition:
  - condition: template
    value_template: '{{ not is_state(''sensor.hacs'', ''unknown'') }}'
  action:
  - data:
      message: "{% for repo in state_attr('sensor.hacs', 'repositories') %}\n  {{
        repo.display_name }}\n  Current Version:  {{ repo.installed_version }}\n  New
        Version: {{ repo.available_version }}\n  Repository: {{ repo.name }}\n  {{
        \"\\r\\n\" }}\n{% endfor %}\nTotal Updates: {{ states('sensor.hacs') }}\n"
      title: HACS Update available!
    service: persistent_notification.create
  mode: single
- id: '1673833578702'
  alias: Backup - Purge Expired
  description: Purge expired backups. Only run on demand as they should be auto-purged
    when a backup runs
  trigger: []
  condition: []
  action:
  - service: auto_backup.purge
    data: {}
  mode: single
- id: '1673847782759'
  alias: Doorbell - Front Door
  description: When the Front Door Doorbell button is pressed
  trigger:
  - device_id: b2990f635b5d962e05abee686174eed4
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
  condition: []
  action:
  - service: media_player.volume_set
    data:
      volume_level: 0.45
    target:
      entity_id:
      - media_player.master_bedroom_speaker
      - media_player.living_room_speaker
      - media_player.office_speaker
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.front_doorbell
  - service: media_player.play_media
    target:
      entity_id:
      - media_player.media_player_all
    data:
      media_content_id: media-source://media_source/local/Westminster-chimes-doorbell.mp3
      media_content_type: audio/mp3
  - service: notify.mark_ios_devices
    data:
      message: Someone is at the Front Door
      title: Doorbell
      data:
        push:
          interruption-level: time-sensitive
        group: Doorbell
  - delay:
      seconds: 30
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.front_doorbell
  mode: parallel
- id: '1673848646816'
  alias: Doorbell - Kitchen Door
  description: When the Kitchen Door Doorbell button is pressed
  trigger:
  - device_id: 7a79dd690f234c01cfb565ba06423a2f
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
  condition: []
  action:
  - service: media_player.volume_set
    data:
      volume_level: 0.45
    target:
      entity_id:
      - media_player.master_bedroom_speaker
      - media_player.living_room_speaker
      - media_player.office_speaker
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.kitchen_doorbell
  - service: media_player.play_media
    target:
      entity_id: media_player.media_player_all
    data:
      media_content_id: media-source://media_source/local/Ding-dong-sound-effect.mp3
      media_content_type: audio/mpeg
    metadata:
      title: Ding-dong-sound-effect.mp3
      thumbnail:
      media_class: music
      children_media_class:
      navigateIds:
      - {}
      - media_content_type: app
        media_content_id: media-source://media_source
  - service: notify.mark_ios_devices
    data:
      message: Someone is at the Kitchen Door
      title: Doorbell
      data:
        push:
          interruption-level: time-sensitive
        group: Alarm
  - delay:
      hours: 0
      minutes: 0
      seconds: 30
      milliseconds: 0
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.kitchen_doorbell
  mode: parallel
  max: 10
- id: '1673866162514'
  alias: Door - Front Gate
  description: Turn on courtyard light if Front Gate is opened
  trigger:
  - type: opened
    platform: device
    device_id: 48009f8ce07ba0a2c677683c7b8113c4
    entity_id: binary_sensor.front_gate_open_close
    domain: binary_sensor
  condition:
  - condition: sun
    before: sunrise
    after: sunset
  action:
  - service: scene.turn_on
    target:
      entity_id:
      - scene.courtyard_bright
    data: {}
  mode: single
- id: '1673866593059'
  alias: Courtyard - Light Off
  description: Turn off Courtyard light after 5 minutes
  trigger:
  - platform: state
    entity_id:
    - light.courtyard
    to: 'on'
    for:
      hours: 0
      minutes: 5
      seconds: 0
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.courtyard
  mode: single
- id: '1674619053854'
  alias: Laundry - Status Change
  description: A toggle button to indicate whether Laundry is on the line
  trigger:
  - device_id: 3e10d404d016de323f03a1811eb3ab67
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: turn_on
  condition: []
  action:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id: input_boolean.laundry_hung
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{% if states(''input_boolean.laundry_hung'') == ''on'' %} Laundry
          has been hung {% else %} Laundry has been brought inside {% endif %}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mark_ios_devices
      data:
        message: '{% if states(''input_boolean.laundry_hung'') == ''on'' %} Laundry
          has been hung {% else %} Laundry has been brought inside {% endif %}'
        title: Laundry
        data:
          group: System
          push:
            interruption-level: time-sensitive
      enabled: true
  mode: single
- id: '1674619899913'
  alias: Laundry - Warning - Notification
  description: A warning that there is laundry on the line that needs to come in
  trigger:
  - platform: time_pattern
    minutes: /15
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, bring in the
        laundry!
  condition:
  - condition: state
    entity_id: input_boolean.laundry_hung
    state: 'on'
  - condition: time
    after: '16:29:59'
    before: '18:30:01'
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mark_ios_devices
      data:
        message: '{{ trigger_message }}'
        title: Laundry
        data:
          group: System
          push:
            interruption-level: time-sensitive
      enabled: true
  mode: single
- id: '1676516203370'
  alias: Rubbish - Bins Out - Notification
  description: Broadcast a reminder message to put out the rubbish bins
  trigger:
  - platform: time_pattern
    minutes: '0'
    seconds: '0'
    variables:
      trigger_message: '{% if states(''sensor.greens_bin'') == "tomorrow" %} {% set
        type = "Green" %} {% endif %} Hey {{ ["doofus", "moron", "idiot", "clown",
        "goose", "jackass", "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead",
        "dummy", "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull",
        "fathead", "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, put
        the rubbish and {% if type == "Green" %}greens{% else %}recycling{% endif
        %} bins out!'
    enabled: true
  condition:
  - condition: time
    weekday:
    - thu
  - condition: state
    entity_id: input_boolean.rubbish_bins
    state: 'off'
  - condition: time
    after: '16:59:59'
    before: '21:00:01'
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        title: Rubbish
        message: '{{ trigger_message }}'
        data:
          push:
            interruption-level: time-sensitive
          group: Rubbish
  mode: single
- id: '1676584193002'
  alias: Rubbish - Bins In - Notification
  description: Broadcast a reminder message to bring in the rubbish bins
  trigger:
  - platform: time
    at: '12:00:00'
    variables:
      trigger_message: '{% if states(''sensor.greens_bin'') == "tomorrow" %} {% set
        type = "Green" %} {% endif %} Hey {{ ["doofus", "moron", "idiot", "clown",
        "goose", "jackass", "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead",
        "dummy", "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull",
        "fathead", "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, bring
        the rubbish and {% if type == "Green" %}greens{% else %}recycling{% endif
        %} bins in!'
  condition:
  - condition: time
    weekday:
    - fri
  - condition: state
    entity_id: input_boolean.rubbish_bins
    state: 'on'
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        title: Rubbish
        message: '{{ trigger_message }}'
        data:
          push:
            interruption-level: time-sensitive
          group: Rubbish
  mode: single
- id: '1676603626188'
  alias: Rubbish  - Status Change
  description: A toggle button to indicate whether the rubbish bins are out
  trigger:
  - device_id: 2236b20b470b598f1934d86ddf095ed7
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: turn_on
  condition: []
  action:
  - service: input_boolean.toggle
    data: {}
    target:
      entity_id:
      - input_boolean.rubbish_bins
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{% if states(''sensor.greens_bin'') == "tomorrow" %} {% set type
          = "Green" %} {% endif %} {% if states(''input_boolean.rubbish_bins'') ==
          ''on'' %} Rubbish and {% if type == "Green" %}greens{% else %}recycling{%
          endif %} bins are out {% else %} Rubbish and {% if type == "Green" %}greens{%
          else %}recycling{% endif %} bins are in {% endif %}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mark_ios_devices
      data:
        message: '{% if states(''sensor.greens_bin'') == "tomorrow" %} {% set type
          = "Green" %} {% endif %} {% if states(''input_boolean.rubbish_bins'') ==
          ''on'' %} Rubbish and {% if type == "Green" %}greens{% else %}recycling{%
          endif %} bins are out {% else %} Rubbish and {% if type == "Green" %}greens{%
          else %}recycling{% endif %} bins are in{% endif %}'
        title: Rubbish
        data:
          group: Rubbish
          push:
            interruption-level: time-sensitive
  mode: single
- id: '1678369695153'
  alias: Mini Switch - Long Press
  description: Long press on the bedroom mini switch
  trigger:
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_long_release
    subtype: remote_button_long_release
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      floor_id:
      - downstairs
      - upstairs
      - outside
  - service: switch.turn_off
    data: {}
    target:
      entity_id:
      - switch.monitors
      - switch.plug_2
      - switch.plug_3
  mode: single
- id: '1678680150162'
  alias: System - Document Printed - Notification
  description: Notification when a document is completed printed
  trigger:
  - platform: state
    entity_id:
    - sensor.hl_l8250cdn_status
    to: ready
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, your document
        has finished printing on the Brother printer.
  condition: []
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        message: '{{ trigger_message }}'
        title: Printing
        data:
          push:
            interruption-level: time-sensitive
          group: Office
  mode: single
- id: '1678753836526'
  alias: Weather  - Bad Weather Warning - Notification
  description: Issue a bad weather warning when the weather is expected to be rainiy
    or lightning
  trigger:
  - platform: state
    entity_id:
    - weather.marsfield_hourly
    to:
    - pouring
    - rainy
    - lightning
    - lightning, rainy
    - hail
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, the weather
        is expected to be {{ states['weather.marsfield_hourly'].state }} in the next
        hour! {% if (states['input_boolean.laundry_hung'].state) == 'on' %} Check
        your laundry!{% endif %}
  condition:
  - condition: state
    entity_id: input_boolean.gone_to_bed
    state: 'off'
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        title: Bad Weather Warning
        message: '{{ trigger_message }}'
        data:
          push:
            interruption-level: time-sensitive
          group: Weather
  mode: single
- id: '1678778884106'
  alias: Presence - Welcome Home
  description: Welcome home message
  trigger:
  - type: motion
    platform: device
    device_id: a674e14a85bab4e885d481a556aee691
    entity_id: binary_sensor.living_room_motion
    domain: binary_sensor
  - type: motion
    platform: device
    device_id: dd2d3b47331ac2a55603b79c393fcb85
    entity_id: binary_sensor.kitchen_motion_ias_zone
    domain: binary_sensor
  condition:
  - condition: state
    entity_id: input_boolean.welcome_home
    state: 'on'
  action:
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id:
      - automation.kitchen_motion
      - automation.living_room_motion
    enabled: false
  - if:
    - condition: numeric_state
      entity_id: zone.home
      above: 0
      below: 2
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.living_room_speaker
        message: Welcome home {% set people = state_attr('zone.home', 'persons') %}
          {%- set peoplestr = state_attr(people[0], "friendly_name") -%} {%- set list1
          = peoplestr.split(' ') -%} {{ list1[0] }}! It's {{ now().strftime('%H:%M,
          %A %d %B %Y') }}. {% if states['calendar.australia_nsw'] and state_attr('calendar.australia_nsw',
          'start_time') == today %}Today is {{ state_attr('calendar.australia_nsw',
          'message') }}.{% endif %} The current temperature in Marsfield is {{ states['sensor.sydney_olympic_park_temp'].state
          }} degrees heading for an expected maximum of {{ states['sensor.marsfield_temp_max_0'].state
          }} degrees. The weather is forecast to be {{ states['sensor.marsfield_extended_text_0'].state
          }} {{ states['sensor.marsfield_uv_summary'].state }} {{ states['sensor.marsfield_fire_danger_summary'].state
          }} Sunset is at {{ states['sensor.nextsunset'].state }}. {% if states('sensor.rubbish_bin')
          == 'tomorrow' %} Remember, the rubbish and {% if states['sensor.greens_bin'].state
          == "tomorrow" %}greens{% else %}recycling{% endif %} bins need to go out
          tonight.{%- endif -%} {% if states('sensor.rubbish_bin') == 'today' and
          states('input_boolean.rubbish_bins') == 'on'%} Remember to bring in the
          rubbish and {% if states['sensor.greens_bin'].state == "today" %}greens{%
          else %}recycling{% endif %} bins.{%- endif -%} Have a great day!
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: script.broadcast_message
      data:
        entity_id: media_player.living_room_speaker
        message: Welcome home.  It's {{ now().strftime('%H:%M') }}. {% if states['calendar.australia_nsw']
          and state_attr('calendar.australia_nsw', 'start_time') == today %}Today
          is {{ state_attr('calendar.australia_nsw', 'message') }}.{% endif %} The
          current temperature in Marsfield is {{ states['sensor.sydney_olympic_park_temp'].state
          }} degrees heading for an expected maximum of {{ states['sensor.marsfield_temp_max_0'].state
          }} degrees. The weather is forecast to be {{ states['sensor.marsfield_extended_text_0'].state
          }} {{ states['sensor.marsfield_uv_summary'].state }} {{ states['sensor.marsfield_fire_danger_summary'].state
          }} Sunset is at {{ states['sensor.nextsunset'].state }}. {% if states('sensor.rubbish_bin')
          == 'tomorrow' %} Remember, the rubbish and {% if states['sensor.greens_bin'].state
          == "tomorrow" %}greens{% else %}recycling{% endif %} bins need to go out
          tonight.{%- endif -%} {% if states('sensor.rubbish_bin') == 'today' and
          states('input_boolean.rubbish_bins') == 'on'%} Remember to bring in the
          rubbish and {% if states['sensor.greens_bin'].state == "today" %}greens{%
          else %}recycling{% endif %} bins.{%- endif -%} Have a great day!
        volume: '{{ states(''input_number.volume_default'') }}'
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.welcome_home
  mode: single
- id: '1678839098764'
  alias: Plex - User Warning - Notification
  description: Notify me when any external Plex user starts playing content
  trigger:
  - platform: state
    entity_id:
    - sensor.agentofkaos_state
    to: playing
    variables:
      content: sensor.agentofkaos_full_title
  - platform: state
    entity_id:
    - sensor.crakyl_state
    to: playing
    variables:
      content: sensor.crakyl_full_title
  - platform: state
    entity_id:
    - sensor.d_e_matheson_state
    to: playing
    variables:
      content: sensor.d_e_matheson_full_title
  - platform: state
    entity_id:
    - sensor.jaqu4_state
    to: playing
    variables:
      content: sensor.jaqu4_full_title
  - platform: state
    entity_id:
    - sensor.virgilreality_state
    to: playing
    variables:
      content: sensor.virgilreality_full_title
  condition: []
  action:
  - service: notify.mark_ios_devices
    data:
      title: Plex
      message: '{{ state_attr(trigger.entity_id, ''friendly_name'') }} has started
        playing {{ states(media_title) }} ({{ states(media_series_title) }}

        '
      data:
        push:
          interruption-level: time-sensitive
        group: Plex
  mode: single
- id: '1679552322202'
  alias: Mini Switch - Double-Clicked
  description: When the bedroom mini switch is double clicked, toggle the Alarm between
    Night and Disarmed
  trigger:
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: remote_button_double_press
  condition: []
  action:
  - if:
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: disarmed
    then:
    - service: script.alarm_night
      data: {}
    else:
    - service: script.alarm_disarm
      data: {}
  mode: single
- id: '1683779746435'
  alias: Motion - Front
  description: Motion Sensor actions for the Front Door
  trigger:
  - type: motion
    platform: device
    device_id: 552e5c6b8bf427f6d06d068c91cfab2a
    entity_id: binary_sensor.front_door_motion_on_off
    domain: binary_sensor
    id: motion-detected
  - type: no_motion
    platform: device
    device_id: 552e5c6b8bf427f6d06d068c91cfab2a
    entity_id: binary_sensor.front_door_motion_on_off
    domain: binary_sensor
    for:
      hours: 0
      minutes: 0
      seconds: 0
    id: motion-not-detected
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: motion-detected
      sequence:
      - service: scene.turn_on
        target:
          entity_id: scene.front_door_cool_bright
        metadata: {}
    default:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.front_door_2
  mode: single
- id: '1685951125233'
  alias: Proximity - Notification
  description: Send a notification when I am above/below 250m from home
  trigger:
  - platform: numeric_state
    entity_id: proximity.home
    id: leaving-home
    above: 250
  - platform: numeric_state
    entity_id: proximity.home
    below: 250
    id: approaching-home
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: leaving-home
      sequence:
      - service: notify.mobile_app_marks_iphone
        data:
          message: Mark leaving home
          data:
            group: Proximity
            push:
              interruption-level: time-sensitive
        enabled: false
    - conditions:
      - condition: trigger
        id: approaching-home
      sequence:
      - if:
        - condition: sun
          after: sunset
          before: sunrise
        then:
        - service: scene.turn_on
          target:
            entity_id: scene.carport_cool_bright
          metadata: {}
        - service: notify.mobile_app_marks_iphone
          data:
            data:
              group: Proximity
              push:
                interruption-level: time-sensitive
            message: Carport light turned on
  mode: single
- id: '1686005512439'
  alias: Focus - Persistent Notification
  description: Send a persistent notification when a focus is turned on
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.marks_iphone_focus
    from: 'off'
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 15
  condition: []
  action:
  - service: persistent_notification.create
    data:
      title: Focus Set
      message:
        '[object Object]':
  mode: single
- id: '1686010205796'
  alias: Focus - Turn Off
  description: Set focus option to Off when iPhone focus is turned off
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.marks_iphone_focus
    from: 'on'
    to: 'off'
    for:
      hours: 0
      minutes: 0
      seconds: 15
  condition: []
  action:
  - service: input_select.select_option
    data:
      option: 'Off'
    target:
      entity_id: input_select.focus
  mode: single
- id: '1686019697739'
  alias: Mini Switch - Combined
  description: Combine all switch actions into a single automation
  trigger:
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_long_release
    subtype: remote_button_long_release
    id: long_press
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_short_press
    subtype: remote_button_short_press
    id: pressed
  - device_id: 6cd779dbc8d0b3ea0085e50301bd2176
    domain: zha
    platform: device
    type: remote_button_double_press
    subtype: remote_button_double_press
    id: double-clicked
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id: long_press
      sequence:
      - service: light.turn_off
        data: {}
        target:
          entity_id: light.lights_all
      - service: switch.turn_off
        data: {}
        target:
          entity_id:
          - switch.plug_2
          - switch.plug_3
          - switch.monitors
    - conditions:
      - condition: trigger
        id: double-clicked
      sequence:
      - if:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: disarmed
        then:
        - service: script.alarm_night
          data: {}
        else:
        - service: script.alarm_disarm
          data: {}
    - conditions:
      - condition: trigger
        id: pressed
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.gone_to_bed
          state: 'on'
        then:
        - service: automation.trigger
          data:
            skip_condition: true
          target:
            entity_id: automation.good_morning
        else:
        - service: automation.trigger
          data:
            skip_condition: true
          target:
            entity_id: automation.good_night
      - service: input_datetime.set_datetime
        data:
          time: '{{ now().strftime(''%H:%M:%S'') }}'
  mode: single
- id: '1686037567782'
  alias: Proximity - Heating - Turn on
  description: Turn on the living room heating if within 5kms of home
  trigger:
  - platform: numeric_state
    entity_id: proximity.home
    below: 5000
  condition:
  - condition: state
    entity_id: input_select.air_conditioning_mode
    state: Winter
  action:
  - service: climate.set_preset_mode
    data:
      preset_mode: home
    target:
      entity_id: climate.living_room_heater_controller
  - service: notify.mark_ios_devices
    data:
      message: The Living Room heater has changed to Home mode
      title: Proximity Message
      data:
        group: Proximity
        push:
          interruption-level: time-sensitive
  mode: single
- id: '1686799777286'
  alias: Backup - Manual - Sync ONLY
  description: Manually sync all backups to Dropbox
  trigger: []
  condition: []
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_sync_manual
  - service: script.dropbox_sync
    data: {}
  - wait_for_trigger:
    - platform: state
      entity_id:
      - sensor.dropback_sync
      to: None
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_sync_manual
  mode: single
- id: '1687303164470'
  alias: Air Conditioning - Morning Activation
  description: Turn on the heaters/fans based on them being below the specified temperature
  trigger:
  - platform: time
    at: 06:30:00
  condition:
  - condition: state
    entity_id: person.mark_matheson
    state: home
  - condition: numeric_state
    entity_id: input_number.air_conditioning_temperature
    above: 0
  action:
  - if:
    - condition: state
      entity_id: input_select.air_conditioning_mode
      state: Winter
    - condition: numeric_state
      entity_id: climate.bedroom_heater_controller
      below: input_number.air_conditioning_temperature
    then:
    - service: climate.set_preset_mode
      data:
        preset_mode: Home
      target:
        entity_id: climate.bedroom_heater_controller
  - if:
    - condition: state
      entity_id: input_select.air_conditioning_mode
      state: Winter
    - condition: numeric_state
      entity_id: climate.living_room_heater_controller
      below: input_number.air_conditioning_temperature
    then:
    - service: climate.set_preset_mode
      data:
        preset_mode: Home
      target:
        entity_id: climate.living_room_heater_controller
  mode: single
- id: '1687307560910'
  alias: Air Conditioning - Temperature Change
  description: Set the temperature on all thermostats when the desired temperature
    is changed
  trigger:
  - platform: state
    entity_id:
    - input_number.air_conditioning_temperature
  condition: []
  action:
  - service: climate.set_temperature
    data:
      temperature: '{{ states(''input_number.air_conditioning_temperature'') | float(1)
        }}'
    target:
      entity_id:
      - climate.bedroom_heater_controller
      - climate.bedroom_fan_controller
      - climate.living_room_heater_controller
      - climate.living_room_fan_controller
  mode: single
- id: '1687326204924'
  alias: Air Conditioning - Seasonal Change
  description: Activate/Deactivate heaters/fans when the season changes
  trigger:
  - platform: state
    entity_id:
    - input_select.air_conditioning_mode
  condition: []
  action:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_select.air_conditioning_mode
        state: Winter
      sequence:
      - service: climate.set_hvac_mode
        data:
          hvac_mode: heat
        target:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
      - service: climate.set_hvac_mode
        data:
          hvac_mode: 'off'
        target:
          entity_id:
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - service: climate.set_preset_mode
        data:
          preset_mode: home
        target:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
      - service: climate.set_preset_mode
        data:
          preset_mode: none
        target:
          entity_id:
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - service: homeassistant.enable_entity
        data:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
      - service: homeassistant.disable_entity
        data:
          entity_id:
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - type: turn_off
        device_id: 47914177e50e29dc64d159a14d62ac1b
        entity_id: switch.schedule_morning_fans
        domain: switch
      - type: turn_on
        device_id: 47914177e50e29dc64d159a14d62ac1b
        entity_id: switch.schedule_morning_heaters
        domain: switch
      - service: input_number.set_value
        data:
          value: 17
        target:
          entity_id: input_number.air_conditioning_temperature
      - service: generic_thermostat.reload
        data: {}
    - conditions:
      - condition: state
        entity_id: input_select.air_conditioning_mode
        state: Summer
      sequence:
      - service: climate.set_hvac_mode
        data:
          hvac_mode: cool
        target:
          entity_id:
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - service: climate.set_hvac_mode
        data:
          hvac_mode: 'off'
        target:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
      - service: climate.set_preset_mode
        data:
          preset_mode: home
        target:
          entity_id:
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - service: climate.set_preset_mode
        data:
          preset_mode: none
        target:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
      - service: homeassistant.disable_entity
        data:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
      - service: homeassistant.enable_entity
        data:
          entity_id:
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - type: turn_off
        device_id: 47914177e50e29dc64d159a14d62ac1b
        entity_id: switch.schedule_morning_heaters
        domain: switch
      - type: turn_on
        device_id: 47914177e50e29dc64d159a14d62ac1b
        entity_id: switch.schedule_morning_fans
        domain: switch
      - service: input_number.set_value
        data:
          value: 25
        target:
          entity_id: input_number.air_conditioning_temperature
      - service: generic_thermostat.reload
        data: {}
    - conditions:
      - condition: state
        entity_id: input_select.air_conditioning_mode
        state: 'Off'
      sequence:
      - service: climate.set_hvac_mode
        data:
          hvac_mode: 'off'
        target:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - service: climate.set_preset_mode
        data:
          preset_mode: none
        target:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - service: homeassistant.disable_entity
        data:
          entity_id:
          - climate.bedroom_heater_controller
          - climate.living_room_heater_controller
          - climate.bedroom_fan_controller
          - climate.living_room_fan_controller
      - type: turn_off
        device_id: 47914177e50e29dc64d159a14d62ac1b
        entity_id: switch.schedule_morning_heaters
        domain: switch
      - type: turn_off
        device_id: 47914177e50e29dc64d159a14d62ac1b
        entity_id: switch.schedule_morning_fans
        domain: switch
      - service: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.air_conditioning_temperature
      - service: generic_thermostat.reload
        data: {}
  mode: single
- id: '1687490962915'
  alias: Alarm - Check - Motion
  description: Check that all motion sensors are inactive.
  trigger: []
  condition: []
  action:
  - if:
    - condition: numeric_state
      entity_id: sensor.number_of_motion_sensors_active
      above: 0
    then:
    - service: notify.notify
      data_template:
        title: ALARM
        message: "Hey {{ [\"doofus\", \"moron\", \"idiot\", \"clown\", \"goose\",
          \"jackass\", \"ninny\",\n  \"dork\", \"nitwit\", \"turkey\", \"nincompoop\",
          \"knucklehead\", \"dummy\",\n  \"ding-a-ling\", \"dipstick\", \"ding-dong\",
          \"half-wit\", \"numbskull\", \"fathead\",\n  \"butt-head\", \"dumbbell\",
          \"chump\", \"dunce\", \"dodo\"] | random }}, the {{ states('sensor.what_motion_sensors_are_active')
          }} {% if is_state('sensor.number_of_motion_sensors_active', '1') %}sensor
          is{% else %}sensors are{% endif %} active!\n"
        data:
          subtitle: Motion Sensors Active!
          push:
            interruption-level: time-sensitive
          group: Alarm
      alias: 'Notification: Sensors active'
    else:
    - service: notify.notify
      data_template:
        title: ALARM
        message: "Hey {{ [\"doofus\", \"moron\", \"idiot\", \"clown\", \"goose\",
          \"jackass\", \"ninny\",\n  \"dork\", \"nitwit\", \"turkey\", \"nincompoop\",
          \"knucklehead\", \"dummy\",\n  \"ding-a-ling\", \"dipstick\", \"ding-dong\",
          \"half-wit\", \"numbskull\", \"fathead\",\n  \"butt-head\", \"dumbbell\",
          \"chump\", \"dunce\", \"dodo\"] | random }}, no Motion Sensors are active!\n"
        data:
          subtitle: Motion Sensors Active!
          push:
            interruption-level: time-sensitive
          group: Alarm
      alias: 'Notification: No Motion Sensors active'
    alias: Confirm number of active motion sensors is above 0
  mode: single
- id: '1687494648755'
  alias: Alert - UPS - Offline
  description: Check if the UPS has gone offline/unavailable
  trigger:
  - platform: state
    entity_id:
    - sensor.ups_status_data_2
    from: OL
  condition: []
  action:
  - service: notify.notify
    data_template:
      title: Alert
      message: "Hey {{ [\"doofus\", \"moron\", \"idiot\", \"clown\", \"goose\", \"jackass\",
        \"ninny\",\n  \"dork\", \"nitwit\", \"turkey\", \"nincompoop\", \"knucklehead\",
        \"dummy\",\n  \"ding-a-ling\", \"dipstick\", \"ding-dong\", \"half-wit\",
        \"numbskull\", \"fathead\",\n  \"butt-head\", \"dumbbell\", \"chump\", \"dunce\",
        \"dodo\"] | random }}, the UPS is {{ states('sensor.ups_status') }}!\n"
      data:
        subtitle: UPS
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1687496112438'
  alias: Alert - Router - IP Address Changed
  description: Advise when the public IP address changes
  trigger:
  - platform: state
    entity_id:
    - sensor.ups_status_2
    from: online
  - platform: state
    entity_id:
    - sensor.unifi_gateway_wan_ip
  condition: []
  action:
  - service: notify.notify
    data_template:
      title: IP Address Change
      message: 'Public IP address has changed to {{ states(''sensor.unifi_gateway_wan_ip'')
        }}!

        '
      data:
        push:
          interruption-level: time-sensitive
        group: Alert
  mode: single
- id: '1687573939081'
  alias: Blinds - Close
  description: Close the bedroom blinds at sunset
  trigger:
  - platform: sun
    event: sunset
    offset: 00:30:00
  condition:
  - condition: state
    entity_id: person.mark_matheson
    state: home
  action:
  - service: cover.close_cover
    data: {}
    target:
      entity_id: cover.lumi_lumi_curtain_acn002_cover
  - service: script.broadcast_message
    data:
      entity_id: media_player.media_player_all
      message: Bedroom blinds are closed!
      volume: '{{ states(''input_number.volume_default'') }}'
    enabled: false
  mode: single
- id: '1687574426543'
  alias: Presence - Nap
  description: Prepare bedroom to have a nap
  trigger:
  - platform: state
    entity_id:
    - input_boolean.napping
    to: 'on'
    id: started
  - platform: state
    entity_id:
    - input_boolean.napping
    to: 'off'
    id: stopped
  condition: []
  action:
  - if:
    - condition: trigger
      id: started
    then:
    - service: cover.close_cover
      data: {}
      target:
        entity_id: cover.lumi_lumi_curtain_acn002_cover
    - service: script.alarm_downstairs
      data: {}
      enabled: false
    else:
    - service: cover.open_cover
      data: {}
      target:
        entity_id: cover.lumi_lumi_curtain_acn002_cover
    - service: script.alarm_disarm
      data: {}
      enabled: false
  mode: single
- id: '1689214583369'
  alias: Motion - Bathroom
  description: Action if motion is detected in the Bathroom
  trigger:
  - type: motion
    platform: device
    device_id: a8d6273a427ae872f41359abd91d932b
    entity_id: b6b7f46451f17e918466513233ee0e3d
    domain: binary_sensor
    id: Started
  - type: no_motion
    platform: device
    device_id: a8d6273a427ae872f41359abd91d932b
    entity_id: b6b7f46451f17e918466513233ee0e3d
    domain: binary_sensor
    id: Stopped
    for:
      hours: 0
      minutes: 5
      seconds: 30
  condition:
  - condition: sun
    before: sunrise
    after: sunset
    after_offset: -01:00:00
    enabled: false
  - type: is_illuminance
    condition: device
    device_id: e568296ada5965b277294d65fe9acc97
    entity_id: sensor.toilet_motion_illuminance
    domain: sensor
    below: 125
    enabled: false
  action:
  - if:
    - condition: trigger
      id: Started
    then:
    - if:
      - condition: state
        entity_id: input_boolean.gone_to_bed
        state: 'on'
      then:
      - service: light.turn_on
        data:
          brightness_pct: 30
        target:
          area_id: bathroom
      - service: scene.turn_on
        target:
          entity_id: scene.bathroom_dimmed
        metadata: {}
      else:
      - service: scene.turn_on
        target:
          entity_id: scene.bathroom_cool_bright
        metadata: {}
    else:
    - service: light.turn_off
      data: {}
      target:
        area_id:
        - bathroom
  mode: single
- id: '1689476012819'
  alias: System - Todays Birthdays
  description: Update a text helper each night with the upcoming birthdays
  trigger:
  - platform: time
    at: 00:05:00
  condition: []
  action:
  - service: calendar.get_events
    target:
      entity_id:
      - calendar.contact_birthdays
      device_id: []
      area_id: []
    data: {}
    response_variable: birthdays
  - service: input_text.set_value
    target:
      entity_id: input_text.birthdays
    data:
      value: '{% for event in birthdays.events %} {{ event.summary }} {% endfor %}'
  - service: script.broadcast_message
    data:
      entity_id: media_player.media_player_all
      message: '{{ states(''input_text.birthdays'') }}'
      volume: '{{ states(''input_number.volume_default'') }}'
    enabled: false
  mode: single
- id: '1689493490805'
  alias: Backup - Notifications
  description: Backup Notifications - Backup and Sync - Started and Finished
  trigger:
  - platform: template
    value_template: '{{ is_state(''sensor.samba_backup'',''RUNNING'') }}'
    id: backup_started
  - platform: template
    value_template: '{{ not is_state(''sensor.samba_backup'',''RUNNING'') }}'
    id: backup_stopped
  - platform: template
    value_template: '{{ not is_state(''sensor.dropback_sync'',''None'') }}'
    id: sync_started
  - platform: template
    value_template: '{{ is_state(''sensor.dropback_sync'',''None'') }}'
    id: sync_stopped
  - platform: template
    value_template: '{{ not is_state(''sensor.samba_backup'',''RUNNING'') }}'
    id: samba_stopped
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - backup_started
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.backup_notifications
          state: 'on'
        then:
        - service: notify.mark_ios_devices
          data:
            message: Backup has started
            data:
              group: Backup
              push:
                interruption-level: time-sensitive
          alias: Backup Started Notification
    - conditions:
      - condition: trigger
        id:
        - backup_stopped
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.backup_notifications
          state: 'on'
        then:
        - service: notify.mark_ios_devices
          data:
            message: Backup has finished
            data:
              group: Backup
              push:
                interruption-level: time-sensitive
          alias: Backup Stopped Notification
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id:
          - input_boolean.backup_active
          - input_boolean.backup_active_midnight
          - input_boolean.backup_active_manual
    - conditions:
      - condition: trigger
        id:
        - sync_started
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.backup_notifications
          state: 'on'
        then:
        - service: notify.mark_ios_devices
          data:
            message: Sync has started
            data:
              group: Backup
              push:
                interruption-level: time-sensitive
          alias: Sync Started Notification
    - conditions:
      - condition: trigger
        id:
        - sync_stopped
      sequence:
      - if:
        - condition: state
          entity_id: input_boolean.backup_notifications
          state: 'on'
        then:
        - service: notify.mark_ios_devices
          data:
            message: Sync has finished
            data:
              group: Backup
              push:
                interruption-level: time-sensitive
          alias: Sync Stopped Notification
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id:
          - input_boolean.backup_sync_active
          - input_boolean.backup_sync_active_midnight
          - input_boolean.backup_sync_manual
    - conditions:
      - condition: trigger
        id:
        - samba_stopped
      sequence:
      - service: input_boolean.turn_off
        data: {}
        target:
          entity_id:
          - input_boolean.backup_active_manual
          - input_boolean.backup_active
          - input_boolean.backup_active_midnight
  mode: single
- id: '1689654417279'
  alias: Backup - Manual
  description: Manual backup run on demand
  trigger:
  - platform: time_pattern
    hours: /12
    enabled: false
  condition:
  - condition: time
    after: 00:01:00
    before: '23:59:00'
    enabled: false
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_active_manual
  - service: auto_backup.backup_partial
    data:
      name: Manual - {{ now().strftime('%A %-d %B %Y %-I:%M %p') }}
      keep_days: 3
      folders:
      - homeassistant
      - media
      - share
      - ssl
  - wait_template: '{{ is_state(''sensor.auto_backup'',''0'') }}'
    continue_on_timeout: false
    enabled: true
  - wait_for_trigger:
    - platform: event
      event_type: auto_backup.backup_successful
    enabled: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_active
    enabled: false
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id: input_boolean.backup_sync_manual
  - service: script.dropbox_sync
    data: {}
  - wait_template: '{{ is_state(''sensor.dropback_sync'',''None'') }}'
    continue_on_timeout: false
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.backup_sync_active
    enabled: false
  mode: single
- id: '1689814215849'
  alias: System - Restore Samba Backup sensor on startup
  description: Restore Samba Backup sensor on startup
  trigger:
  - event: start
    platform: homeassistant
  action:
  - service: hassio.addon_stdin
    data:
      addon: 15d21743_samba_backup
      input: restore-sensor
  - service: hassio.addon_stdin
    data:
      addon: 719b45ef-dropback
      input: restore-sensor
    enabled: false
  mode: single
- id: '1691192583910'
  alias: Blinds - Open/Close - Away
  description: Open/Close the blinds at sunrise/sunset when occupants are away from
    home
  trigger:
  - platform: sun
    event: sunrise
    offset: 0:30:00
    id: sunrise
  - platform: sun
    event: sunset
    offset: 0:30:00
    id: sunset
  condition:
  - condition: state
    entity_id: group.occupants
    state: not_home
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - sunrise
      sequence:
      - service: cover.open_cover
        data: {}
        target:
          entity_id: cover.lumi_lumi_curtain_acn002_cover
    - conditions:
      - condition: trigger
        id:
        - sunset
      sequence:
      - service: cover.close_cover
        data: {}
        target:
          entity_id: cover.lumi_lumi_curtain_acn002_cover
  mode: single
- id: '1431594919196'
  alias: Plex - Playing - Notification
  description: Plex Notifications - https://community.home-assistant.io/t/simple-notifications-when-plex-is-playing/381893
  trigger:
  - platform: state
    from:
    - idle
    - unavailable
    to: playing
    entity_id:
    - media_player.plex_d_e_matheson_plex_for_lg_lg_oled65a1pta
  action:
  - service: notify.mobile_app_marks_iphone
    data:
      title: Playing on {{ device }}
      message: "{% if series == None %}\n  {{ title }}\n{% else %}\n  {{ series }}
        - {{ title }}\n{% endif %}\n"
      data:
        icon_url: ' {{ picture }}'
  - service: persistent_notification.create
    data:
      title: Playing on {{ device }}
      message: "{% if series == None %}\n  {{ title }}\n{% else %}\n  {{ series }}
        - {{ title }}\n{% endif %}\n"
  mode: single
  variables:
    device: '{{ state_attr(trigger.entity_id, ''friendly_name'') }}'
    series: '{{ state_attr(trigger.entity_id, ''media_series_title'') }}'
    title: '{{ state_attr(trigger.entity_id, ''media_title'') }}'
    picture: '{{ state_attr(trigger.entity_id, ''entity_picture'') }}'
- id: '1700268477703'
  alias: Dimmer - Upstairs
  description: Dimmer controls
  trigger:
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: short_release
    subtype: 1
    unique_id: d6fdb9ab-eac0-434e-84b0-acd4f8ea8d2a
    id: press_1
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: short_release
    subtype: 2
    unique_id: e13a0937-052e-4b64-bc59-01a795449f6d
    id: press_2
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: short_release
    subtype: 3
    unique_id: 0c6f5939-a645-4cc9-8385-21a4f5eaad77
    id: press_3
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: short_release
    subtype: 4
    unique_id: e5dc2677-fca5-4963-adef-f6810aefc013
    id: press_4
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: long_release
    subtype: 2
    unique_id: e13a0937-052e-4b64-bc59-01a795449f6d
    id: long_2
  - device_id: 855bb5e531ca268fd222212e87d8177e
    domain: hue
    platform: device
    type: long_release
    subtype: 3
    unique_id: 0c6f5939-a645-4cc9-8385-21a4f5eaad77
    id: long_3
  condition: []
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - press_1
      sequence:
      - service: script.alarm_disarm
        data: {}
    - conditions:
      - condition: trigger
        id:
        - press_2
      - condition: state
        entity_id: input_boolean.gone_to_bed
        state: 'off'
      sequence:
      - service: cover.open_cover
        data: {}
        target:
          entity_id: cover.lumi_lumi_curtain_acn002_cover
    - conditions:
      - condition: trigger
        id:
        - press_3
      - condition: state
        entity_id: input_boolean.gone_to_bed
        state: 'off'
      sequence:
      - service: cover.close_cover
        data: {}
        target:
          entity_id: cover.lumi_lumi_curtain_acn002_cover
    - conditions:
      - condition: trigger
        id:
        - press_4
      sequence:
      - service: script.alarm_night
        data: {}
    - conditions:
      - condition: trigger
        id:
        - long_2
      sequence:
      - service: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id: automation.good_morning
      - service: cover.open_cover
        data: {}
        target:
          entity_id: cover.lumi_lumi_curtain_acn002_cover
      - service: input_datetime.set_datetime
        data:
          time: '{{ now().strftime(''%H:%M:%S'') }}'
    - conditions:
      - condition: trigger
        id:
        - long_3
      sequence:
      - service: cover.open_cover
        data: {}
        target:
          entity_id: cover.lumi_lumi_curtain_acn002_cover
  mode: single
- id: '1700457149998'
  alias: Battery - Low - Notification
  description: Notification of a battery level below 10%
  use_blueprint:
    path: Sbyx/low-battery-level-detection-notification-for-all-battery-sensors.yaml
    input:
      threshold: 15
      exclude:
        entity_id:
        - sensor.ups_battery_charge_2
        device_id:
        - d3870537d165b56f77f85c9aeb60358b
        - ad207d5866265ffa3c63a5251fa0aa5c
        - 02a8207d0546d1c384f05cb400c483b2
        - cb551b0f97f8888c391434fb33f7cfdd
        - e1e2966998a59721e9baf330ffbed4f1
        - e568296ada5965b277294d65fe9acc97
        - 4a5afeb4c9503bf0c19c50e47c75ed33
        - 4902d5785909000e1e5d0f58a8087cc1
        - 6e58e985d0d26c5577f6cbc01f5537fd
        - dd2d3b47331ac2a55603b79c393fcb85
        - a8d6273a427ae872f41359abd91d932b
        - a674e14a85bab4e885d481a556aee691
        - 1d7d59d94c75d97244521d56052b20ad
        - 552e5c6b8bf427f6d06d068c91cfab2a
        - 4b9b6aa1031bf88101700ce43ff894d6
        - b2990f635b5d962e05abee686174eed4
        - 7a79dd690f234c01cfb565ba06423a2f
        - f18beed3778382faaf0ec073cd02d4c1
        - b37af0fb0e6264276fb476df525d4579
        - 3af38f2da09a901abd4f1dd2105f7a7c
        - e9fea23e4c8b6b2d372a5c7b14b6b192
        - 1a5adcdf74437226214d88c29bd35da9
        - 71ce8d4859084575b814c89ce9980a09
      actions:
      - service: notify.persistent_notification
        data:
          message: The battery on the {{sensors}} sensors are low.
      - if:
        - condition: state
          entity_id: person.mark_matheson
          state: home
        then:
        - service: script.broadcast_message
          data:
            entity_id: media_player.media_player_all
            message: The battery on the {{sensors}} sensors are low.
            volume: '{{ states(''input_number.volume_default'') }}'
        else:
        - service: notify.mark_ios_devices
          data:
            title: Low Battery
            message: The battery on the {{sensors}} sensors are low.
      time: '16:00:00'
      day: 7
- id: '1703631506011'
  alias: Testing - Repeat messages
  description: Testing time patterns and repeating messages
  trigger:
  - platform: time_pattern
    seconds: '0'
    minutes: '0'
  condition:
  - condition: time
    after: '10:59:59'
    before: '13:00:01'
  action:
  - service: notify.mobile_app_marks_iphone
    data:
      title: Testing
      message: On the hour, every hour between 10AM and 1PM
      data:
        push:
          interruption-level: time-sensitive
        group: Testing
  mode: single
- id: '1704063798959'
  alias: Holiday Scream
  description: Shout a message on a holiday
  trigger:
  - platform: state
    entity_id:
    - binary_sensor.workday_sensor
    to: 'on'
    variables:
      trigger_message: It's a holiday
  condition:
  - condition: time
    after: '10:15:59'
    before: '10:16:01'
    weekday:
    - mon
    - tue
    - wed
    - thu
    - fri
    - sat
    - sun
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        message: '{{ trigger_message }}'
        title: Holiday
        data:
          push:
            interruption-level: time-sensitive
          group: Holiday
  mode: single
- id: '1704753782888'
  alias: Rubbish - Hard Rubbish - Notification
  description: Broadcast a reminder message to put the hard rubbish out
  trigger:
  - platform: calendar
    event: start
    offset: '-156:0:0'
    entity_id: calendar.hard_rubbish_collection
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, don't forget
        that it's hard rubbish collection week!
    id: Monday
  - platform: calendar
    event: start
    offset: '-132:0:0'
    entity_id: calendar.hard_rubbish_collection
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, don't forget
        that it's hard rubbish collection week!
    id: Tuesday
  - platform: calendar
    event: start
    offset: '-108:0:0'
    entity_id: calendar.hard_rubbish_collection
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, don't forget
        that it's hard rubbish collection week!
    id: Wednesday
  - platform: calendar
    event: start
    offset: '-84:0:0'
    entity_id: calendar.hard_rubbish_collection
    variables:
      trigger_message: Hey {{ ["doofus", "moron", "idiot", "clown", "goose", "jackass",
        "ninny", "dork", "nitwit", "turkey", "nincompoop", "knucklehead", "dummy",
        "ding-a-ling", "dipstick", "ding-dong", "half-wit", "numbskull", "fathead",
        "butt-head", "dumbbell", "chump", "dunce", "dodo"]|random }}, don't forget
        that it's hard rubbish collection week!
    id: Thursday
  condition: []
  action:
  - if:
    - condition: state
      entity_id: person.mark_matheson
      state: home
    then:
    - service: script.broadcast_message
      data:
        entity_id: media_player.media_player_all
        message: '{{ trigger_message }}'
        volume: '{{ states(''input_number.volume_default'') }}'
    else:
    - service: notify.mobile_app_marks_iphone
      data:
        title: Rubbish
        message: '{{ trigger_message }}'
        data:
          push:
            interruption-level: time-sensitive
          group: Rubbish
  mode: single
- id: '1706830012084'
  alias: Speedtest update interval
  description: Speedtest update on the 47th minute of every hour
  trigger:
  - platform: time_pattern
    minutes: '47'
  condition: []
  action:
  - service: homeassistant.update_entity
    data: {}
    target:
      entity_id: sensor.speedtest_download
  mode: single
- id: '1706942934006'
  alias: System - Broadcast message
  description: Broadcast a message on the GHM speakers
  trigger: []
  condition: []
  action:
  - service: script.broadcast_message
    data:
      entity_id: '{{ states(''input_select.speaker'') }}'
      message: '{{ states(''input_text.message'') }}'
      volume: '{{ states(''input_number.intruder_volume'') }}'
  mode: single
- id: '1714176481069'
  alias: Security - Lights Off
  description: Turn off Security lights after 2 minutes
  trigger:
  - platform: state
    entity_id:
    - light.lights_security
    to: 'on'
    for:
      hours: 0
      minutes: 2
      seconds: 0
  condition: []
  action:
  - service: light.turn_off
    data: {}
    target:
      entity_id:
      - light.lights_security
  mode: single
